// Generated by jextract

package com.tsurugidb.tsubakuro.rust.ffi;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class tsubakuro_rust_ffi_h {

    tsubakuro_rust_ffi_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfInt C_LONG = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfDouble C_LONG_DOUBLE = ValueLayout.JAVA_DOUBLE;
    private static final int __GNUC_VA_LIST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return __GNUC_VA_LIST;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int _VCRT_COMPILER_PREPROCESSOR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _VCRT_COMPILER_PREPROCESSOR 1
     * }
     */
    public static int _VCRT_COMPILER_PREPROCESSOR() {
        return _VCRT_COMPILER_PREPROCESSOR;
    }
    private static final int _SAL_VERSION = (int)20L;
    /**
     * {@snippet lang=c :
     * #define _SAL_VERSION 20
     * }
     */
    public static int _SAL_VERSION() {
        return _SAL_VERSION;
    }
    private static final int __SAL_H_VERSION = (int)180000000L;
    /**
     * {@snippet lang=c :
     * #define __SAL_H_VERSION 180000000
     * }
     */
    public static int __SAL_H_VERSION() {
        return __SAL_H_VERSION;
    }
    private static final int _USE_DECLSPECS_FOR_SAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _USE_DECLSPECS_FOR_SAL 0
     * }
     */
    public static int _USE_DECLSPECS_FOR_SAL() {
        return _USE_DECLSPECS_FOR_SAL;
    }
    private static final int _USE_ATTRIBUTES_FOR_SAL = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _USE_ATTRIBUTES_FOR_SAL 0
     * }
     */
    public static int _USE_ATTRIBUTES_FOR_SAL() {
        return _USE_ATTRIBUTES_FOR_SAL;
    }
    private static final int _CRT_PACKING = (int)8L;
    /**
     * {@snippet lang=c :
     * #define _CRT_PACKING 8
     * }
     */
    public static int _CRT_PACKING() {
        return _CRT_PACKING;
    }
    private static final int _HAS_EXCEPTIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _HAS_EXCEPTIONS 1
     * }
     */
    public static int _HAS_EXCEPTIONS() {
        return _HAS_EXCEPTIONS;
    }
    private static final int _HAS_CXX17 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _HAS_CXX17 0
     * }
     */
    public static int _HAS_CXX17() {
        return _HAS_CXX17;
    }
    private static final int _HAS_CXX20 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _HAS_CXX20 0
     * }
     */
    public static int _HAS_CXX20() {
        return _HAS_CXX20;
    }
    private static final int _HAS_CXX23 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _HAS_CXX23 0
     * }
     */
    public static int _HAS_CXX23() {
        return _HAS_CXX23;
    }
    private static final int _HAS_NODISCARD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _HAS_NODISCARD 0
     * }
     */
    public static int _HAS_NODISCARD() {
        return _HAS_NODISCARD;
    }
    private static final int WCHAR_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN 0
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WCHAR_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 65535
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WINT_MIN = (int)0L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 65535
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE 1
     * }
     */
    public static int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE() {
        return _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE;
    }
    private static final int _CRT_BUILD_DESKTOP_APP = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_BUILD_DESKTOP_APP 1
     * }
     */
    public static int _CRT_BUILD_DESKTOP_APP() {
        return _CRT_BUILD_DESKTOP_APP;
    }
    private static final int _ARGMAX = (int)100L;
    /**
     * {@snippet lang=c :
     * #define _ARGMAX 100
     * }
     */
    public static int _ARGMAX() {
        return _ARGMAX;
    }
    private static final int _CRT_INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INT_MAX 2147483647
     * }
     */
    public static int _CRT_INT_MAX() {
        return _CRT_INT_MAX;
    }
    private static final int _CRT_FUNCTIONS_REQUIRED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_FUNCTIONS_REQUIRED 1
     * }
     */
    public static int _CRT_FUNCTIONS_REQUIRED() {
        return _CRT_FUNCTIONS_REQUIRED;
    }
    private static final int _CRT_HAS_CXX17 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _CRT_HAS_CXX17 0
     * }
     */
    public static int _CRT_HAS_CXX17() {
        return _CRT_HAS_CXX17;
    }
    private static final int _CRT_HAS_C11 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_HAS_C11 1
     * }
     */
    public static int _CRT_HAS_C11() {
        return _CRT_HAS_C11;
    }
    private static final int _CRT_INTERNAL_NONSTDC_NAMES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_INTERNAL_NONSTDC_NAMES 1
     * }
     */
    public static int _CRT_INTERNAL_NONSTDC_NAMES() {
        return _CRT_INTERNAL_NONSTDC_NAMES;
    }
    private static final int __STDC_WANT_SECURE_LIB__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_SECURE_LIB__ 1
     * }
     */
    public static int __STDC_WANT_SECURE_LIB__() {
        return __STDC_WANT_SECURE_LIB__;
    }
    private static final int _SECURECRT_FILL_BUFFER_PATTERN = (int)254L;
    /**
     * {@snippet lang=c :
     * #define _SECURECRT_FILL_BUFFER_PATTERN 254
     * }
     */
    public static int _SECURECRT_FILL_BUFFER_PATTERN() {
        return _SECURECRT_FILL_BUFFER_PATTERN;
    }
    private static final int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES() {
        return _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES;
    }
    private static final int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT() {
        return _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT;
    }
    private static final int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 1
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES() {
        return _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES;
    }
    private static final int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY() {
        return _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY;
    }
    private static final int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY 0
     * }
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY() {
        return _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY;
    }
    private static final int CHAR_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return CHAR_BIT;
    }
    private static final int SCHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return SCHAR_MAX;
    }
    private static final int UCHAR_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return UCHAR_MAX;
    }
    private static final int MB_LEN_MAX = (int)5L;
    /**
     * {@snippet lang=c :
     * #define MB_LEN_MAX 5
     * }
     */
    public static int MB_LEN_MAX() {
        return MB_LEN_MAX;
    }
    private static final int SHRT_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return SHRT_MAX;
    }
    private static final int USHRT_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return USHRT_MAX;
    }
    private static final int INT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return INT_MAX;
    }
    private static final int EXIT_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return EXIT_SUCCESS;
    }
    private static final int EXIT_FAILURE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return EXIT_FAILURE;
    }
    private static final int _WRITE_ABORT_MSG = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _WRITE_ABORT_MSG 1
     * }
     */
    public static int _WRITE_ABORT_MSG() {
        return _WRITE_ABORT_MSG;
    }
    private static final int _CALL_REPORTFAULT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _CALL_REPORTFAULT 2
     * }
     */
    public static int _CALL_REPORTFAULT() {
        return _CALL_REPORTFAULT;
    }
    private static final int _OUT_TO_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _OUT_TO_DEFAULT 0
     * }
     */
    public static int _OUT_TO_DEFAULT() {
        return _OUT_TO_DEFAULT;
    }
    private static final int _OUT_TO_STDERR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _OUT_TO_STDERR 1
     * }
     */
    public static int _OUT_TO_STDERR() {
        return _OUT_TO_STDERR;
    }
    private static final int _OUT_TO_MSGBOX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _OUT_TO_MSGBOX 2
     * }
     */
    public static int _OUT_TO_MSGBOX() {
        return _OUT_TO_MSGBOX;
    }
    private static final int _REPORT_ERRMODE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _REPORT_ERRMODE 3
     * }
     */
    public static int _REPORT_ERRMODE() {
        return _REPORT_ERRMODE;
    }
    private static final int RAND_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define RAND_MAX 32767
     * }
     */
    public static int RAND_MAX() {
        return RAND_MAX;
    }
    private static final int _MAX_PATH = (int)260L;
    /**
     * {@snippet lang=c :
     * #define _MAX_PATH 260
     * }
     */
    public static int _MAX_PATH() {
        return _MAX_PATH;
    }
    private static final int _MAX_DRIVE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _MAX_DRIVE 3
     * }
     */
    public static int _MAX_DRIVE() {
        return _MAX_DRIVE;
    }
    private static final int _MAX_DIR = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _MAX_DIR 256
     * }
     */
    public static int _MAX_DIR() {
        return _MAX_DIR;
    }
    private static final int _MAX_FNAME = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _MAX_FNAME 256
     * }
     */
    public static int _MAX_FNAME() {
        return _MAX_FNAME;
    }
    private static final int _MAX_EXT = (int)256L;
    /**
     * {@snippet lang=c :
     * #define _MAX_EXT 256
     * }
     */
    public static int _MAX_EXT() {
        return _MAX_EXT;
    }
    private static final int _MAX_ENV = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ENV 32767
     * }
     */
    public static int _MAX_ENV() {
        return _MAX_ENV;
    }
    private static final int TSURUGI_FFI_RC_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_OK 0
     * }
     */
    public static int TSURUGI_FFI_RC_OK() {
        return TSURUGI_FFI_RC_OK;
    }
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list va_list
     * }
     */
    public static final AddressLayout va_list = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __gnuc_va_list
     * }
     */
    public static final AddressLayout __gnuc_va_list = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = tsubakuro_rust_ffi_h.C_LONG_LONG;

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void __va_start(va_list *, ...)
     * }
     */
    public static class __va_start {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                tsubakuro_rust_ffi_h.C_POINTER
            );
        private static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__va_start");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __va_start(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void __va_start(va_list *, ...)
         * }
         */
        public static __va_start makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __va_start(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__va_start", x0, x1);
                }
                spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long long size_t
     * }
     */
    public static final OfLong size_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long intptr_t
     * }
     */
    public static final OfLong intptr_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef _Bool __vcrt_bool
     * }
     */
    public static final OfBoolean __vcrt_bool = tsubakuro_rust_ffi_h.C_BOOL;
    /**
     * {@snippet lang=c :
     * typedef unsigned short wchar_t
     * }
     */
    public static final OfShort wchar_t = tsubakuro_rust_ffi_h.C_SHORT;

    private static class __security_init_cookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__security_init_cookie");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __security_init_cookie()
     * }
     */
    public static FunctionDescriptor __security_init_cookie$descriptor() {
        return __security_init_cookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __security_init_cookie()
     * }
     */
    public static MethodHandle __security_init_cookie$handle() {
        return __security_init_cookie.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void __security_init_cookie()
     * }
     */
    public static MemorySegment __security_init_cookie$address() {
        return __security_init_cookie.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void __security_init_cookie()
     * }
     */
    public static void __security_init_cookie() {
        var mh$ = __security_init_cookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__security_init_cookie");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __security_check_cookie {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__security_check_cookie");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __security_check_cookie(uintptr_t _StackCookie)
     * }
     */
    public static FunctionDescriptor __security_check_cookie$descriptor() {
        return __security_check_cookie.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __security_check_cookie(uintptr_t _StackCookie)
     * }
     */
    public static MethodHandle __security_check_cookie$handle() {
        return __security_check_cookie.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void __security_check_cookie(uintptr_t _StackCookie)
     * }
     */
    public static MemorySegment __security_check_cookie$address() {
        return __security_check_cookie.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void __security_check_cookie(uintptr_t _StackCookie)
     * }
     */
    public static void __security_check_cookie(long _StackCookie) {
        var mh$ = __security_check_cookie.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__security_check_cookie", _StackCookie);
            }
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __report_gsfailure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__report_gsfailure");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void __report_gsfailure(uintptr_t _StackCookie)
     * }
     */
    public static FunctionDescriptor __report_gsfailure$descriptor() {
        return __report_gsfailure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void __report_gsfailure(uintptr_t _StackCookie)
     * }
     */
    public static MethodHandle __report_gsfailure$handle() {
        return __report_gsfailure.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void __report_gsfailure(uintptr_t _StackCookie)
     * }
     */
    public static MemorySegment __report_gsfailure$address() {
        return __report_gsfailure.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void __report_gsfailure(uintptr_t _StackCookie)
     * }
     */
    public static void __report_gsfailure(long _StackCookie) {
        var mh$ = __report_gsfailure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__report_gsfailure", _StackCookie);
            }
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __security_cookie$constants {
        public static final OfLong LAYOUT = tsubakuro_rust_ffi_h.C_LONG_LONG;
        public static final MemorySegment SEGMENT = tsubakuro_rust_ffi_h.findOrThrow("__security_cookie").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static OfLong __security_cookie$layout() {
        return __security_cookie$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static MemorySegment __security_cookie$segment() {
        return __security_cookie$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static long __security_cookie() {
        return __security_cookie$constants.SEGMENT.get(__security_cookie$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern uintptr_t __security_cookie
     * }
     */
    public static void __security_cookie(long varValue) {
        __security_cookie$constants.SEGMENT.set(__security_cookie$constants.LAYOUT, 0L, varValue);
    }
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = tsubakuro_rust_ffi_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = tsubakuro_rust_ffi_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = tsubakuro_rust_ffi_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = tsubakuro_rust_ffi_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_least8_t
     * }
     */
    public static final OfByte int_least8_t = tsubakuro_rust_ffi_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int_least16_t
     * }
     */
    public static final OfShort int_least16_t = tsubakuro_rust_ffi_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int_least32_t
     * }
     */
    public static final OfInt int_least32_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int_least64_t
     * }
     */
    public static final OfLong int_least64_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = tsubakuro_rust_ffi_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = tsubakuro_rust_ffi_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = tsubakuro_rust_ffi_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int int_fast16_t
     * }
     */
    public static final OfInt int_fast16_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = tsubakuro_rust_ffi_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint_fast16_t
     * }
     */
    public static final OfInt uint_fast16_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long intmax_t
     * }
     */
    public static final OfLong intmax_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef _Bool __crt_bool
     * }
     */
    public static final OfBoolean __crt_bool = tsubakuro_rust_ffi_h.C_BOOL;

    private static class _invalid_parameter_noinfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_invalid_parameter_noinfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo()
     * }
     */
    public static FunctionDescriptor _invalid_parameter_noinfo$descriptor() {
        return _invalid_parameter_noinfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo()
     * }
     */
    public static MethodHandle _invalid_parameter_noinfo$handle() {
        return _invalid_parameter_noinfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo()
     * }
     */
    public static MemorySegment _invalid_parameter_noinfo$address() {
        return _invalid_parameter_noinfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo()
     * }
     */
    public static void _invalid_parameter_noinfo() {
        var mh$ = _invalid_parameter_noinfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_invalid_parameter_noinfo");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _invalid_parameter_noinfo_noreturn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_invalid_parameter_noinfo_noreturn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo_noreturn()
     * }
     */
    public static FunctionDescriptor _invalid_parameter_noinfo_noreturn$descriptor() {
        return _invalid_parameter_noinfo_noreturn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo_noreturn()
     * }
     */
    public static MethodHandle _invalid_parameter_noinfo_noreturn$handle() {
        return _invalid_parameter_noinfo_noreturn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo_noreturn()
     * }
     */
    public static MemorySegment _invalid_parameter_noinfo_noreturn$address() {
        return _invalid_parameter_noinfo_noreturn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _invalid_parameter_noinfo_noreturn()
     * }
     */
    public static void _invalid_parameter_noinfo_noreturn() {
        var mh$ = _invalid_parameter_noinfo_noreturn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_invalid_parameter_noinfo_noreturn");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _invoke_watson {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_invoke_watson");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _invoke_watson(const wchar_t *_Expression, const wchar_t *_FunctionName, const wchar_t *_FileName, unsigned int _LineNo, uintptr_t _Reserved)
     * }
     */
    public static FunctionDescriptor _invoke_watson$descriptor() {
        return _invoke_watson.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _invoke_watson(const wchar_t *_Expression, const wchar_t *_FunctionName, const wchar_t *_FileName, unsigned int _LineNo, uintptr_t _Reserved)
     * }
     */
    public static MethodHandle _invoke_watson$handle() {
        return _invoke_watson.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _invoke_watson(const wchar_t *_Expression, const wchar_t *_FunctionName, const wchar_t *_FileName, unsigned int _LineNo, uintptr_t _Reserved)
     * }
     */
    public static MemorySegment _invoke_watson$address() {
        return _invoke_watson.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _invoke_watson(const wchar_t *_Expression, const wchar_t *_FunctionName, const wchar_t *_FileName, unsigned int _LineNo, uintptr_t _Reserved)
     * }
     */
    public static void _invoke_watson(MemorySegment _Expression, MemorySegment _FunctionName, MemorySegment _FileName, int _LineNo, long _Reserved) {
        var mh$ = _invoke_watson.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_invoke_watson", _Expression, _FunctionName, _FileName, _LineNo, _Reserved);
            }
            mh$.invokeExact(_Expression, _FunctionName, _FileName, _LineNo, _Reserved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef int errno_t
     * }
     */
    public static final OfInt errno_t = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short wint_t
     * }
     */
    public static final OfShort wint_t = tsubakuro_rust_ffi_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short wctype_t
     * }
     */
    public static final OfShort wctype_t = tsubakuro_rust_ffi_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef long __time32_t
     * }
     */
    public static final OfInt __time32_t = tsubakuro_rust_ffi_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __time64_t
     * }
     */
    public static final OfLong __time64_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __crt_locale_pointers *_locale_t
     * }
     */
    public static final AddressLayout _locale_t = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __time64_t time_t
     * }
     */
    public static final OfLong time_t = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef size_t rsize_t
     * }
     */
    public static final OfLong rsize_t = tsubakuro_rust_ffi_h.C_LONG_LONG;

    private static class _calloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_calloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _calloc_base$descriptor() {
        return _calloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _calloc_base$handle() {
        return _calloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _calloc_base$address() {
        return _calloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_calloc_base(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _calloc_base(long _Count, long _Size) {
        var mh$ = _calloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_calloc_base", _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class calloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("calloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor calloc$descriptor() {
        return calloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle calloc$handle() {
        return calloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment calloc$address() {
        return calloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *calloc(size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment calloc(long _Count, long _Size) {
        var mh$ = calloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("calloc", _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _callnewh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_callnewh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static FunctionDescriptor _callnewh$descriptor() {
        return _callnewh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static MethodHandle _callnewh$handle() {
        return _callnewh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static MemorySegment _callnewh$address() {
        return _callnewh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _callnewh(size_t _Size)
     * }
     */
    public static int _callnewh(long _Size) {
        var mh$ = _callnewh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_callnewh", _Size);
            }
            return (int)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_expand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor _expand$descriptor() {
        return _expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle _expand$handle() {
        return _expand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _expand$address() {
        return _expand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_expand(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _expand(MemorySegment _Block, long _Size) {
        var mh$ = _expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_expand", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _free_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_free_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static FunctionDescriptor _free_base$descriptor() {
        return _free_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static MethodHandle _free_base$handle() {
        return _free_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static MemorySegment _free_base$address() {
        return _free_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _free_base(void *_Block)
     * }
     */
    public static void _free_base(MemorySegment _Block) {
        var mh$ = _free_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_free_base", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static FunctionDescriptor free$descriptor() {
        return free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static MethodHandle free$handle() {
        return free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static MemorySegment free$address() {
        return free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free(void *_Block)
     * }
     */
    public static void free(MemorySegment _Block) {
        var mh$ = free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _malloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_malloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static FunctionDescriptor _malloc_base$descriptor() {
        return _malloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MethodHandle _malloc_base$handle() {
        return _malloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MemorySegment _malloc_base$address() {
        return _malloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_malloc_base(size_t _Size)
     * }
     */
    public static MemorySegment _malloc_base(long _Size) {
        var mh$ = _malloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_malloc_base", _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static FunctionDescriptor malloc$descriptor() {
        return malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MethodHandle malloc$handle() {
        return malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MemorySegment malloc$address() {
        return malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *malloc(size_t _Size)
     * }
     */
    public static MemorySegment malloc(long _Size) {
        var mh$ = malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("malloc", _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _msize_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_msize_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static FunctionDescriptor _msize_base$descriptor() {
        return _msize_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static MethodHandle _msize_base$handle() {
        return _msize_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static MemorySegment _msize_base$address() {
        return _msize_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _msize_base(void *_Block)
     * }
     */
    public static long _msize_base(MemorySegment _Block) {
        var mh$ = _msize_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_msize_base", _Block);
            }
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _msize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_msize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static FunctionDescriptor _msize$descriptor() {
        return _msize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static MethodHandle _msize$handle() {
        return _msize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static MemorySegment _msize$address() {
        return _msize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _msize(void *_Block)
     * }
     */
    public static long _msize(MemorySegment _Block) {
        var mh$ = _msize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_msize", _Block);
            }
            return (long)mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _realloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_realloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor _realloc_base$descriptor() {
        return _realloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle _realloc_base$handle() {
        return _realloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _realloc_base$address() {
        return _realloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_realloc_base(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment _realloc_base(MemorySegment _Block, long _Size) {
        var mh$ = _realloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_realloc_base", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static FunctionDescriptor realloc$descriptor() {
        return realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MethodHandle realloc$handle() {
        return realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment realloc$address() {
        return realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *realloc(void *_Block, size_t _Size)
     * }
     */
    public static MemorySegment realloc(MemorySegment _Block, long _Size) {
        var mh$ = realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realloc", _Block, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _recalloc_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_recalloc_base");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _recalloc_base$descriptor() {
        return _recalloc_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _recalloc_base$handle() {
        return _recalloc_base.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc_base$address() {
        return _recalloc_base.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_recalloc_base(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc_base(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_recalloc_base", _Block, _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static FunctionDescriptor _recalloc$descriptor() {
        return _recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MethodHandle _recalloc$handle() {
        return _recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc$address() {
        return _recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_recalloc(void *_Block, size_t _Count, size_t _Size)
     * }
     */
    public static MemorySegment _recalloc(MemorySegment _Block, long _Count, long _Size) {
        var mh$ = _recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_recalloc", _Block, _Count, _Size);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static FunctionDescriptor _aligned_free$descriptor() {
        return _aligned_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static MethodHandle _aligned_free$handle() {
        return _aligned_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static MemorySegment _aligned_free$address() {
        return _aligned_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _aligned_free(void *_Block)
     * }
     */
    public static void _aligned_free(MemorySegment _Block) {
        var mh$ = _aligned_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_free", _Block);
            }
            mh$.invokeExact(_Block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_malloc$descriptor() {
        return _aligned_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_malloc$handle() {
        return _aligned_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_malloc$address() {
        return _aligned_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_malloc(size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_malloc(long _Size, long _Alignment) {
        var mh$ = _aligned_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_malloc", _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_offset_malloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_malloc$descriptor() {
        return _aligned_offset_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_malloc$handle() {
        return _aligned_offset_malloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_malloc$address() {
        return _aligned_offset_malloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_malloc(long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_malloc", _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_msize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_msize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_msize$descriptor() {
        return _aligned_msize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_msize$handle() {
        return _aligned_msize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_msize$address() {
        return _aligned_msize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _aligned_msize(void *_Block, size_t _Alignment, size_t _Offset)
     * }
     */
    public static long _aligned_msize(MemorySegment _Block, long _Alignment, long _Offset) {
        var mh$ = _aligned_msize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_msize", _Block, _Alignment, _Offset);
            }
            return (long)mh$.invokeExact(_Block, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_offset_realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_realloc$descriptor() {
        return _aligned_offset_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_realloc$handle() {
        return _aligned_offset_realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_realloc$address() {
        return _aligned_offset_realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_realloc(void *_Block, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_realloc(MemorySegment _Block, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_realloc", _Block, _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_offset_recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_offset_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static FunctionDescriptor _aligned_offset_recalloc$descriptor() {
        return _aligned_offset_recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MethodHandle _aligned_offset_recalloc$handle() {
        return _aligned_offset_recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_recalloc$address() {
        return _aligned_offset_recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_offset_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset)
     * }
     */
    public static MemorySegment _aligned_offset_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment, long _Offset) {
        var mh$ = _aligned_offset_recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_offset_recalloc", _Block, _Count, _Size, _Alignment, _Offset);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment, _Offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_realloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_realloc$descriptor() {
        return _aligned_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_realloc$handle() {
        return _aligned_realloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_realloc$address() {
        return _aligned_realloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_realloc(void *_Block, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_realloc(MemorySegment _Block, long _Size, long _Alignment) {
        var mh$ = _aligned_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_realloc", _Block, _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _aligned_recalloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_aligned_recalloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static FunctionDescriptor _aligned_recalloc$descriptor() {
        return _aligned_recalloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MethodHandle _aligned_recalloc$handle() {
        return _aligned_recalloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_recalloc$address() {
        return _aligned_recalloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_aligned_recalloc(void *_Block, size_t _Count, size_t _Size, size_t _Alignment)
     * }
     */
    public static MemorySegment _aligned_recalloc(MemorySegment _Block, long _Count, long _Size, long _Alignment) {
        var mh$ = _aligned_recalloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_aligned_recalloc", _Block, _Count, _Size, _Alignment);
            }
            return (MemorySegment)mh$.invokeExact(_Block, _Count, _Size, _Alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef double max_align_t
     * }
     */
    public static final OfDouble max_align_t = tsubakuro_rust_ffi_h.C_DOUBLE;

    private static class bsearch_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("bsearch_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor bsearch_s$descriptor() {
        return bsearch_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle bsearch_s$handle() {
        return bsearch_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment bsearch_s$address() {
        return bsearch_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *bsearch_s(const void *_Key, const void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment bsearch_s(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = bsearch_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("qsort_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor qsort_s$descriptor() {
        return qsort_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle qsort_s$handle() {
        return qsort_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment qsort_s$address() {
        return qsort_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void qsort_s(void *_Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static void qsort_s(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = qsort_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort_s", _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("bsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor bsearch$descriptor() {
        return bsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle bsearch$handle() {
        return bsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment bsearch$address() {
        return bsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *bsearch(const void *_Key, const void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment bsearch(MemorySegment _Key, MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = bsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("qsort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor qsort$descriptor() {
        return qsort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle qsort$handle() {
        return qsort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment qsort$address() {
        return qsort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void qsort(void *_Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static void qsort(MemorySegment _Base, long _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = qsort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort", _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            mh$.invokeExact(_Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lfind_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_lfind_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor _lfind_s$descriptor() {
        return _lfind_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle _lfind_s$handle() {
        return _lfind_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lfind_s$address() {
        return _lfind_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lfind_s(const void *_Key, const void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lfind_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lfind_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lfind_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lfind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_lfind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor _lfind$descriptor() {
        return _lfind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle _lfind$handle() {
        return _lfind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lfind$address() {
        return _lfind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lfind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lfind", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lsearch_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_lsearch_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static FunctionDescriptor _lsearch_s$descriptor() {
        return _lsearch_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MethodHandle _lsearch_s$handle() {
        return _lsearch_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lsearch_s$address() {
        return _lsearch_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lsearch_s(const void *_Key, void *_Base, unsigned int *_NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void *_Context)
     * }
     */
    public static MemorySegment _lsearch_s(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, long _SizeOfElements, MemorySegment _CompareFunction, MemorySegment _Context) {
        var mh$ = _lsearch_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lsearch_s", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction, _Context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_lsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor _lsearch$descriptor() {
        return _lsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle _lsearch$handle() {
        return _lsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lsearch$address() {
        return _lsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *_lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment _lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = _lsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lfind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("lfind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor lfind$descriptor() {
        return lfind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle lfind$handle() {
        return lfind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lfind$address() {
        return lfind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *lfind(const void *_Key, const void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lfind(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lfind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lfind", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("lsearch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static FunctionDescriptor lsearch$descriptor() {
        return lsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MethodHandle lsearch$handle() {
        return lsearch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lsearch$address() {
        return lsearch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *lsearch(const void *_Key, void *_Base, unsigned int *_NumOfElements, unsigned int _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction)
     * }
     */
    public static MemorySegment lsearch(MemorySegment _Key, MemorySegment _Base, MemorySegment _NumOfElements, int _SizeOfElements, MemorySegment _CompareFunction) {
        var mh$ = lsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lsearch", _Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
            }
            return (MemorySegment)mh$.invokeExact(_Key, _Base, _NumOfElements, _SizeOfElements, _CompareFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_itow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _itow_s$descriptor() {
        return _itow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _itow_s$handle() {
        return _itow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _itow_s$address() {
        return _itow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _itow_s(int _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _itow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_itow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _itow$descriptor() {
        return _itow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _itow$handle() {
        return _itow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itow$address() {
        return _itow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_itow(int _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ltow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltow_s$descriptor() {
        return _ltow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ltow_s$handle() {
        return _ltow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ltow_s$address() {
        return _ltow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ltow_s(long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ltow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ltow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltow$descriptor() {
        return _ltow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ltow$handle() {
        return _ltow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltow$address() {
        return _ltow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ltow(long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ultow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultow_s$descriptor() {
        return _ultow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ultow_s$handle() {
        return _ultow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ultow_s$address() {
        return _ultow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ultow_s(unsigned long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ultow_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ultow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultow$descriptor() {
        return _ultow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ultow$handle() {
        return _ultow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultow$address() {
        return _ultow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ultow(unsigned long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultow(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstod$descriptor() {
        return wcstod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstod$handle() {
        return wcstod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstod$address() {
        return wcstod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double wcstod(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static double wcstod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstod", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstod_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstod_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstod_l$descriptor() {
        return _wcstod_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstod_l$handle() {
        return _wcstod_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstod_l$address() {
        return _wcstod_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wcstod_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _wcstod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstod_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstod_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstol$descriptor() {
        return wcstol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstol$handle() {
        return wcstol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstol$address() {
        return wcstol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long wcstol(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static int wcstol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstol", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstol_l$descriptor() {
        return _wcstol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstol_l$handle() {
        return _wcstol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstol_l$address() {
        return _wcstol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wcstol_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _wcstol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstol_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoll$descriptor() {
        return wcstoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoll$handle() {
        return wcstoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoll$address() {
        return wcstoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long wcstoll(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long wcstoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoll", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoll_l$descriptor() {
        return _wcstoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoll_l$handle() {
        return _wcstoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoll_l$address() {
        return _wcstoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoll_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoll_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstoul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoul$descriptor() {
        return wcstoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoul$handle() {
        return wcstoul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoul$address() {
        return wcstoul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long wcstoul(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static int wcstoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoul", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoul_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstoul_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoul_l$descriptor() {
        return _wcstoul_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoul_l$handle() {
        return _wcstoul_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoul_l$address() {
        return _wcstoul_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _wcstoul_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _wcstoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoul_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoul_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstoull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor wcstoull$descriptor() {
        return wcstoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle wcstoull$handle() {
        return wcstoull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment wcstoull$address() {
        return wcstoull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long wcstoull(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long wcstoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = wcstoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstoull", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoull_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstoull_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoull_l$descriptor() {
        return _wcstoull_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoull_l$handle() {
        return _wcstoull_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoull_l$address() {
        return _wcstoull_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoull_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoull_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoull_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstold$descriptor() {
        return wcstold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstold$handle() {
        return wcstold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstold$address() {
        return wcstold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double wcstold(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static double wcstold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstold", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstold_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstold_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstold_l$descriptor() {
        return _wcstold_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstold_l$handle() {
        return _wcstold_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstold_l$address() {
        return _wcstold_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double _wcstold_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _wcstold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstold_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstold_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_FLOAT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static FunctionDescriptor wcstof$descriptor() {
        return wcstof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MethodHandle wcstof$handle() {
        return wcstof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static MemorySegment wcstof$address() {
        return wcstof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float wcstof(const wchar_t *_String, wchar_t **_EndPtr)
     * }
     */
    public static float wcstof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = wcstof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstof", _String, _EndPtr);
            }
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_FLOAT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstof_l$descriptor() {
        return _wcstof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstof_l$handle() {
        return _wcstof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstof_l$address() {
        return _wcstof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float _wcstof_l(const wchar_t *_String, wchar_t **_EndPtr, _locale_t _Locale)
     * }
     */
    public static float _wcstof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _wcstof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstof_l", _String, _EndPtr, _Locale);
            }
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtof$descriptor() {
        return _wtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtof$handle() {
        return _wtof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtof$address() {
        return _wtof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wtof(const wchar_t *_String)
     * }
     */
    public static double _wtof(MemorySegment _String) {
        var mh$ = _wtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtof", _String);
            }
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtof_l$descriptor() {
        return _wtof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtof_l$handle() {
        return _wtof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtof_l$address() {
        return _wtof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _wtof_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static double _wtof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtof_l", _String, _Locale);
            }
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtoi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoi$descriptor() {
        return _wtoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoi$handle() {
        return _wtoi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoi$address() {
        return _wtoi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wtoi(const wchar_t *_String)
     * }
     */
    public static int _wtoi(MemorySegment _String) {
        var mh$ = _wtoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtoi_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoi_l$descriptor() {
        return _wtoi_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoi_l$handle() {
        return _wtoi_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoi_l$address() {
        return _wtoi_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wtoi_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static int _wtoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtol$descriptor() {
        return _wtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtol$handle() {
        return _wtol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtol$address() {
        return _wtol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wtol(const wchar_t *_String)
     * }
     */
    public static int _wtol(MemorySegment _String) {
        var mh$ = _wtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtol", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtol_l$descriptor() {
        return _wtol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtol_l$handle() {
        return _wtol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtol_l$address() {
        return _wtol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _wtol_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static int _wtol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtol_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoll$descriptor() {
        return _wtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoll$handle() {
        return _wtoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoll$address() {
        return _wtoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoll(const wchar_t *_String)
     * }
     */
    public static long _wtoll(MemorySegment _String) {
        var mh$ = _wtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoll", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoll_l$descriptor() {
        return _wtoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoll_l$handle() {
        return _wtoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoll_l$address() {
        return _wtoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoll_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static long _wtoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoll_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64tow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_i64tow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64tow_s$descriptor() {
        return _i64tow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _i64tow_s$handle() {
        return _i64tow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _i64tow_s$address() {
        return _i64tow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _i64tow_s(long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _i64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64tow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64tow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64tow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_i64tow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64tow$descriptor() {
        return _i64tow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _i64tow$handle() {
        return _i64tow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64tow$address() {
        return _i64tow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_i64tow(long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64tow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64tow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64tow_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ui64tow_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64tow_s$descriptor() {
        return _ui64tow_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ui64tow_s$handle() {
        return _ui64tow_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow_s$address() {
        return _ui64tow_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ui64tow_s(unsigned long long _Value, wchar_t *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ui64tow_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64tow_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64tow_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64tow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ui64tow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64tow$descriptor() {
        return _ui64tow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ui64tow$handle() {
        return _ui64tow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow$address() {
        return _ui64tow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_ui64tow(unsigned long long _Value, wchar_t *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64tow(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64tow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64tow", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static FunctionDescriptor _wtoi64$descriptor() {
        return _wtoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static MethodHandle _wtoi64$handle() {
        return _wtoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static MemorySegment _wtoi64$address() {
        return _wtoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoi64(const wchar_t *_String)
     * }
     */
    public static long _wtoi64(MemorySegment _String) {
        var mh$ = _wtoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi64", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wtoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wtoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wtoi64_l$descriptor() {
        return _wtoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wtoi64_l$handle() {
        return _wtoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wtoi64_l$address() {
        return _wtoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wtoi64_l(const wchar_t *_String, _locale_t _Locale)
     * }
     */
    public static long _wtoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _wtoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wtoi64_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _wcstoi64$descriptor() {
        return _wcstoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _wcstoi64$handle() {
        return _wcstoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _wcstoi64$address() {
        return _wcstoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoi64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long _wcstoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoi64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoi64_l$descriptor() {
        return _wcstoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoi64_l$handle() {
        return _wcstoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoi64_l$address() {
        return _wcstoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _wcstoi64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoi64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoui64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstoui64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _wcstoui64$descriptor() {
        return _wcstoui64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _wcstoui64$handle() {
        return _wcstoui64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _wcstoui64$address() {
        return _wcstoui64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoui64(const wchar_t *_String, wchar_t **_EndPtr, int _Radix)
     * }
     */
    public static long _wcstoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _wcstoui64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoui64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstoui64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstoui64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstoui64_l$descriptor() {
        return _wcstoui64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstoui64_l$handle() {
        return _wcstoui64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstoui64_l$address() {
        return _wcstoui64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _wcstoui64_l(const wchar_t *_String, wchar_t **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _wcstoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _wcstoui64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstoui64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wfullpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wfullpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _wfullpath$descriptor() {
        return _wfullpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MethodHandle _wfullpath$handle() {
        return _wfullpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wfullpath$address() {
        return _wfullpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wfullpath(wchar_t *_Buffer, const wchar_t *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wfullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _wfullpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wfullpath", _Buffer, _Path, _BufferCount);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wmakepath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wmakepath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wmakepath_s$descriptor() {
        return _wmakepath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wmakepath_s$handle() {
        return _wmakepath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wmakepath_s$address() {
        return _wmakepath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wmakepath_s(wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static int _wmakepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wmakepath_s", _Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wmakepath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wmakepath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wmakepath$descriptor() {
        return _wmakepath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wmakepath$handle() {
        return _wmakepath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wmakepath$address() {
        return _wmakepath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wmakepath(wchar_t *_Buffer, const wchar_t *_Drive, const wchar_t *_Dir, const wchar_t *_Filename, const wchar_t *_Ext)
     * }
     */
    public static void _wmakepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wmakepath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wmakepath", _Buffer, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wperror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wperror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static FunctionDescriptor _wperror$descriptor() {
        return _wperror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static MethodHandle _wperror$handle() {
        return _wperror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static MemorySegment _wperror$address() {
        return _wperror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wperror(const wchar_t *_ErrorMessage)
     * }
     */
    public static void _wperror(MemorySegment _ErrorMessage) {
        var mh$ = _wperror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wperror", _ErrorMessage);
            }
            mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsplitpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wsplitpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static FunctionDescriptor _wsplitpath$descriptor() {
        return _wsplitpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static MethodHandle _wsplitpath$handle() {
        return _wsplitpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static MemorySegment _wsplitpath$address() {
        return _wsplitpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wsplitpath(const wchar_t *_FullPath, wchar_t *_Drive, wchar_t *_Dir, wchar_t *_Filename, wchar_t *_Ext)
     * }
     */
    public static void _wsplitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _wsplitpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsplitpath", _FullPath, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsplitpath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wsplitpath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static FunctionDescriptor _wsplitpath_s$descriptor() {
        return _wsplitpath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static MethodHandle _wsplitpath_s$handle() {
        return _wsplitpath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static MemorySegment _wsplitpath_s$address() {
        return _wsplitpath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wsplitpath_s(const wchar_t *_FullPath, wchar_t *_Drive, size_t _DriveCount, wchar_t *_Dir, size_t _DirCount, wchar_t *_Filename, size_t _FilenameCount, wchar_t *_Ext, size_t _ExtCount)
     * }
     */
    public static int _wsplitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _wsplitpath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsplitpath_s", _FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
            }
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wdupenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wdupenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wdupenv_s$descriptor() {
        return _wdupenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wdupenv_s$handle() {
        return _wdupenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wdupenv_s$address() {
        return _wdupenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wdupenv_s(wchar_t **_Buffer, size_t *_BufferCount, const wchar_t *_VarName)
     * }
     */
    public static int _wdupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _wdupenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wdupenv_s", _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wgetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wgetenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wgetenv$descriptor() {
        return _wgetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wgetenv$handle() {
        return _wgetenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv$address() {
        return _wgetenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t *_wgetenv(const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv(MemorySegment _VarName) {
        var mh$ = _wgetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wgetenv", _VarName);
            }
            return (MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wgetenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wgetenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static FunctionDescriptor _wgetenv_s$descriptor() {
        return _wgetenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MethodHandle _wgetenv_s$handle() {
        return _wgetenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static MemorySegment _wgetenv_s$address() {
        return _wgetenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wgetenv_s(size_t *_RequiredCount, wchar_t *_Buffer, size_t _BufferCount, const wchar_t *_VarName)
     * }
     */
    public static int _wgetenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = _wgetenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wgetenv_s", _RequiredCount, _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wputenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wputenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static FunctionDescriptor _wputenv$descriptor() {
        return _wputenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static MethodHandle _wputenv$handle() {
        return _wputenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static MemorySegment _wputenv$address() {
        return _wputenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wputenv(const wchar_t *_EnvString)
     * }
     */
    public static int _wputenv(MemorySegment _EnvString) {
        var mh$ = _wputenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wputenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wputenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wputenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static FunctionDescriptor _wputenv_s$descriptor() {
        return _wputenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static MethodHandle _wputenv_s$handle() {
        return _wputenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static MemorySegment _wputenv_s$address() {
        return _wputenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wputenv_s(const wchar_t *_Name, const wchar_t *_Value)
     * }
     */
    public static int _wputenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _wputenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wputenv_s", _Name, _Value);
            }
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsearchenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wsearchenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _wsearchenv_s$descriptor() {
        return _wsearchenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _wsearchenv_s$handle() {
        return _wsearchenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _wsearchenv_s$address() {
        return _wsearchenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wsearchenv_s(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_Buffer, size_t _BufferCount)
     * }
     */
    public static int _wsearchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _wsearchenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsearchenv_s", _Filename, _VarName, _Buffer, _BufferCount);
            }
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsearchenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wsearchenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static FunctionDescriptor _wsearchenv$descriptor() {
        return _wsearchenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static MethodHandle _wsearchenv$handle() {
        return _wsearchenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static MemorySegment _wsearchenv$address() {
        return _wsearchenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _wsearchenv(const wchar_t *_Filename, const wchar_t *_VarName, wchar_t *_ResultPath)
     * }
     */
    public static void _wsearchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _ResultPath) {
        var mh$ = _wsearchenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsearchenv", _Filename, _VarName, _ResultPath);
            }
            mh$.invokeExact(_Filename, _VarName, _ResultPath);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wsystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wsystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static FunctionDescriptor _wsystem$descriptor() {
        return _wsystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static MethodHandle _wsystem$handle() {
        return _wsystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static MemorySegment _wsystem$address() {
        return _wsystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wsystem(const wchar_t *_Command)
     * }
     */
    public static int _wsystem(MemorySegment _Command) {
        var mh$ = _wsystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wsystem", _Command);
            }
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _swab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_swab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static FunctionDescriptor _swab$descriptor() {
        return _swab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MethodHandle _swab$handle() {
        return _swab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MemorySegment _swab$address() {
        return _swab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static void _swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = _swab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_swab", _Buf1, _Buf2, _SizeInBytes);
            }
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static FunctionDescriptor exit$descriptor() {
        return exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static MethodHandle exit$handle() {
        return exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static MemorySegment exit$address() {
        return exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void exit(int _Code)
     * }
     */
    public static void exit(int _Code) {
        var mh$ = exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static FunctionDescriptor _exit$descriptor() {
        return _exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static MethodHandle _exit$handle() {
        return _exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static MemorySegment _exit$address() {
        return _exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _exit(int _Code)
     * }
     */
    public static void _exit(int _Code) {
        var mh$ = _exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Exit$ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_Exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static FunctionDescriptor _Exit$descriptor() {
        return _Exit$.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static MethodHandle _Exit$handle() {
        return _Exit$.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static MemorySegment _Exit$address() {
        return _Exit$.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _Exit(int _Code)
     * }
     */
    public static void _Exit(int _Code) {
        var mh$ = _Exit$.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static FunctionDescriptor quick_exit$descriptor() {
        return quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static MethodHandle quick_exit$handle() {
        return quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static MemorySegment quick_exit$address() {
        return quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void quick_exit(int _Code)
     * }
     */
    public static void quick_exit(int _Code) {
        var mh$ = quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("quick_exit", _Code);
            }
            mh$.invokeExact(_Code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("abort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static FunctionDescriptor abort$descriptor() {
        return abort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static MethodHandle abort$handle() {
        return abort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static MemorySegment abort$address() {
        return abort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void abort()
     * }
     */
    public static void abort() {
        var mh$ = abort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abort");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_abort_behavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_abort_behavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static FunctionDescriptor _set_abort_behavior$descriptor() {
        return _set_abort_behavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static MethodHandle _set_abort_behavior$handle() {
        return _set_abort_behavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static MemorySegment _set_abort_behavior$address() {
        return _set_abort_behavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int _set_abort_behavior(unsigned int _Flags, unsigned int _Mask)
     * }
     */
    public static int _set_abort_behavior(int _Flags, int _Mask) {
        var mh$ = _set_abort_behavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_abort_behavior", _Flags, _Mask);
            }
            return (int)mh$.invokeExact(_Flags, _Mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("atexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static FunctionDescriptor atexit$descriptor() {
        return atexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MethodHandle atexit$handle() {
        return atexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MemorySegment atexit$address() {
        return atexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int atexit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static int atexit(MemorySegment x0) {
        var mh$ = atexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atexit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _onexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_onexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static FunctionDescriptor _onexit$descriptor() {
        return _onexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MethodHandle _onexit$handle() {
        return _onexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment _onexit$address() {
        return _onexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _onexit_t _onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment _onexit(MemorySegment _Func) {
        var mh$ = _onexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_onexit", _Func);
            }
            return (MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class at_quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("at_quick_exit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static FunctionDescriptor at_quick_exit$descriptor() {
        return at_quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MethodHandle at_quick_exit$handle() {
        return at_quick_exit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static MemorySegment at_quick_exit$address() {
        return at_quick_exit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int at_quick_exit(void (*)(void) __attribute__((cdecl)))
     * }
     */
    public static int at_quick_exit(MemorySegment x0) {
        var mh$ = at_quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("at_quick_exit", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_purecall_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_purecall_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_purecall_handler$descriptor() {
        return _set_purecall_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MethodHandle _set_purecall_handler$handle() {
        return _set_purecall_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MemorySegment _set_purecall_handler$address() {
        return _set_purecall_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _purecall_handler _set_purecall_handler(_purecall_handler _Handler)
     * }
     */
    public static MemorySegment _set_purecall_handler(MemorySegment _Handler) {
        var mh$ = _set_purecall_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_purecall_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_purecall_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_purecall_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static FunctionDescriptor _get_purecall_handler$descriptor() {
        return _get_purecall_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MethodHandle _get_purecall_handler$handle() {
        return _get_purecall_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MemorySegment _get_purecall_handler$address() {
        return _get_purecall_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _purecall_handler _get_purecall_handler()
     * }
     */
    public static MemorySegment _get_purecall_handler() {
        var mh$ = _get_purecall_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_purecall_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_invalid_parameter_handler$descriptor() {
        return _set_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MethodHandle _set_invalid_parameter_handler$handle() {
        return _set_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_invalid_parameter_handler$address() {
        return _set_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_invalid_parameter_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static FunctionDescriptor _get_invalid_parameter_handler$descriptor() {
        return _get_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MethodHandle _get_invalid_parameter_handler$handle() {
        return _get_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_invalid_parameter_handler$address() {
        return _get_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_invalid_parameter_handler() {
        var mh$ = _get_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_invalid_parameter_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_thread_local_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_thread_local_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static FunctionDescriptor _set_thread_local_invalid_parameter_handler$descriptor() {
        return _set_thread_local_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MethodHandle _set_thread_local_invalid_parameter_handler$handle() {
        return _set_thread_local_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_thread_local_invalid_parameter_handler$address() {
        return _set_thread_local_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler)
     * }
     */
    public static MemorySegment _set_thread_local_invalid_parameter_handler(MemorySegment _Handler) {
        var mh$ = _set_thread_local_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_thread_local_invalid_parameter_handler", _Handler);
            }
            return (MemorySegment)mh$.invokeExact(_Handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_thread_local_invalid_parameter_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_thread_local_invalid_parameter_handler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static FunctionDescriptor _get_thread_local_invalid_parameter_handler$descriptor() {
        return _get_thread_local_invalid_parameter_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MethodHandle _get_thread_local_invalid_parameter_handler$handle() {
        return _get_thread_local_invalid_parameter_handler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_thread_local_invalid_parameter_handler$address() {
        return _get_thread_local_invalid_parameter_handler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _invalid_parameter_handler _get_thread_local_invalid_parameter_handler()
     * }
     */
    public static MemorySegment _get_thread_local_invalid_parameter_handler() {
        var mh$ = _get_thread_local_invalid_parameter_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_thread_local_invalid_parameter_handler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_error_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_error_mode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static FunctionDescriptor _set_error_mode$descriptor() {
        return _set_error_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static MethodHandle _set_error_mode$handle() {
        return _set_error_mode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static MemorySegment _set_error_mode$address() {
        return _set_error_mode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _set_error_mode(int _Mode)
     * }
     */
    public static int _set_error_mode(int _Mode) {
        var mh$ = _set_error_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_error_mode", _Mode);
            }
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_errno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *_errno()
     * }
     */
    public static FunctionDescriptor _errno$descriptor() {
        return _errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *_errno()
     * }
     */
    public static MethodHandle _errno$handle() {
        return _errno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *_errno()
     * }
     */
    public static MemorySegment _errno$address() {
        return _errno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *_errno()
     * }
     */
    public static MemorySegment _errno() {
        var mh$ = _errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_errno");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_errno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _set_errno(int _Value)
     * }
     */
    public static FunctionDescriptor _set_errno$descriptor() {
        return _set_errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _set_errno(int _Value)
     * }
     */
    public static MethodHandle _set_errno$handle() {
        return _set_errno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _set_errno(int _Value)
     * }
     */
    public static MemorySegment _set_errno$address() {
        return _set_errno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _set_errno(int _Value)
     * }
     */
    public static int _set_errno(int _Value) {
        var mh$ = _set_errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_errno", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_errno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_errno(int *_Value)
     * }
     */
    public static FunctionDescriptor _get_errno$descriptor() {
        return _get_errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_errno(int *_Value)
     * }
     */
    public static MethodHandle _get_errno$handle() {
        return _get_errno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_errno(int *_Value)
     * }
     */
    public static MemorySegment _get_errno$address() {
        return _get_errno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_errno(int *_Value)
     * }
     */
    public static int _get_errno(MemorySegment _Value) {
        var mh$ = _get_errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_errno", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __doserrno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__doserrno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long *__doserrno()
     * }
     */
    public static FunctionDescriptor __doserrno$descriptor() {
        return __doserrno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long *__doserrno()
     * }
     */
    public static MethodHandle __doserrno$handle() {
        return __doserrno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long *__doserrno()
     * }
     */
    public static MemorySegment __doserrno$address() {
        return __doserrno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long *__doserrno()
     * }
     */
    public static MemorySegment __doserrno() {
        var mh$ = __doserrno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__doserrno");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_doserrno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_doserrno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _set_doserrno(unsigned long _Value)
     * }
     */
    public static FunctionDescriptor _set_doserrno$descriptor() {
        return _set_doserrno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _set_doserrno(unsigned long _Value)
     * }
     */
    public static MethodHandle _set_doserrno$handle() {
        return _set_doserrno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _set_doserrno(unsigned long _Value)
     * }
     */
    public static MemorySegment _set_doserrno$address() {
        return _set_doserrno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _set_doserrno(unsigned long _Value)
     * }
     */
    public static int _set_doserrno(int _Value) {
        var mh$ = _set_doserrno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_doserrno", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_doserrno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_doserrno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_doserrno(unsigned long *_Value)
     * }
     */
    public static FunctionDescriptor _get_doserrno$descriptor() {
        return _get_doserrno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_doserrno(unsigned long *_Value)
     * }
     */
    public static MethodHandle _get_doserrno$handle() {
        return _get_doserrno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_doserrno(unsigned long *_Value)
     * }
     */
    public static MemorySegment _get_doserrno$address() {
        return _get_doserrno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_doserrno(unsigned long *_Value)
     * }
     */
    public static int _get_doserrno(MemorySegment _Value) {
        var mh$ = _get_doserrno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_doserrno", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sys_errlist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__sys_errlist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static FunctionDescriptor __sys_errlist$descriptor() {
        return __sys_errlist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MethodHandle __sys_errlist$handle() {
        return __sys_errlist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MemorySegment __sys_errlist$address() {
        return __sys_errlist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char **__sys_errlist()
     * }
     */
    public static MemorySegment __sys_errlist() {
        var mh$ = __sys_errlist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sys_errlist");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sys_nerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__sys_nerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static FunctionDescriptor __sys_nerr$descriptor() {
        return __sys_nerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MethodHandle __sys_nerr$handle() {
        return __sys_nerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MemorySegment __sys_nerr$address() {
        return __sys_nerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__sys_nerr()
     * }
     */
    public static MemorySegment __sys_nerr() {
        var mh$ = __sys_nerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sys_nerr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void perror(const char *_ErrMsg)
     * }
     */
    public static void perror(MemorySegment _ErrMsg) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", _ErrMsg);
            }
            mh$.invokeExact(_ErrMsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__pgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p__pgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static FunctionDescriptor __p__pgmptr$descriptor() {
        return __p__pgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MethodHandle __p__pgmptr$handle() {
        return __p__pgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MemorySegment __p__pgmptr$address() {
        return __p__pgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char **__p__pgmptr()
     * }
     */
    public static MemorySegment __p__pgmptr() {
        var mh$ = __p__pgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__pgmptr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__wpgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p__wpgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static FunctionDescriptor __p__wpgmptr$descriptor() {
        return __p__wpgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MethodHandle __p__wpgmptr$handle() {
        return __p__wpgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MemorySegment __p__wpgmptr$address() {
        return __p__wpgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t **__p__wpgmptr()
     * }
     */
    public static MemorySegment __p__wpgmptr() {
        var mh$ = __p__wpgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__wpgmptr");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p__fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static FunctionDescriptor __p__fmode$descriptor() {
        return __p__fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MethodHandle __p__fmode$handle() {
        return __p__fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MemorySegment __p__fmode$address() {
        return __p__fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__p__fmode()
     * }
     */
    public static MemorySegment __p__fmode() {
        var mh$ = __p__fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__fmode");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_pgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_pgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static FunctionDescriptor _get_pgmptr$descriptor() {
        return _get_pgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static MethodHandle _get_pgmptr$handle() {
        return _get_pgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static MemorySegment _get_pgmptr$address() {
        return _get_pgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_pgmptr(char **_Value)
     * }
     */
    public static int _get_pgmptr(MemorySegment _Value) {
        var mh$ = _get_pgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_pgmptr", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_wpgmptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_wpgmptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static FunctionDescriptor _get_wpgmptr$descriptor() {
        return _get_wpgmptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static MethodHandle _get_wpgmptr$handle() {
        return _get_wpgmptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static MemorySegment _get_wpgmptr$address() {
        return _get_wpgmptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_wpgmptr(wchar_t **_Value)
     * }
     */
    public static int _get_wpgmptr(MemorySegment _Value) {
        var mh$ = _get_wpgmptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_wpgmptr", _Value);
            }
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _set_fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_set_fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static FunctionDescriptor _set_fmode$descriptor() {
        return _set_fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static MethodHandle _set_fmode$handle() {
        return _set_fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static MemorySegment _set_fmode$address() {
        return _set_fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _set_fmode(int _Mode)
     * }
     */
    public static int _set_fmode(int _Mode) {
        var mh$ = _set_fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_set_fmode", _Mode);
            }
            return (int)mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _get_fmode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_get_fmode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static FunctionDescriptor _get_fmode$descriptor() {
        return _get_fmode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static MethodHandle _get_fmode$handle() {
        return _get_fmode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static MemorySegment _get_fmode$address() {
        return _get_fmode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _get_fmode(int *_PMode)
     * }
     */
    public static int _get_fmode(MemorySegment _PMode) {
        var mh$ = _get_fmode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_get_fmode", _PMode);
            }
            return (int)mh$.invokeExact(_PMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("abs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static FunctionDescriptor abs$descriptor() {
        return abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static MethodHandle abs$handle() {
        return abs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static MemorySegment abs$address() {
        return abs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int abs(int _Number)
     * }
     */
    public static int abs(int _Number) {
        var mh$ = abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abs", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class labs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("labs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static FunctionDescriptor labs$descriptor() {
        return labs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static MethodHandle labs$handle() {
        return labs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static MemorySegment labs$address() {
        return labs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long labs(long _Number)
     * }
     */
    public static int labs(int _Number) {
        var mh$ = labs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("labs", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("llabs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static FunctionDescriptor llabs$descriptor() {
        return llabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static MethodHandle llabs$handle() {
        return llabs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static MemorySegment llabs$address() {
        return llabs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long llabs(long long _Number)
     * }
     */
    public static long llabs(long _Number) {
        var mh$ = llabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llabs", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _abs64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_abs64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static FunctionDescriptor _abs64$descriptor() {
        return _abs64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static MethodHandle _abs64$handle() {
        return _abs64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static MemorySegment _abs64$address() {
        return _abs64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _abs64(long long _Number)
     * }
     */
    public static long _abs64(long _Number) {
        var mh$ = _abs64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_abs64", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_ushort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_SHORT,
            tsubakuro_rust_ffi_h.C_SHORT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_byteswap_ushort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_ushort$descriptor() {
        return _byteswap_ushort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static MethodHandle _byteswap_ushort$handle() {
        return _byteswap_ushort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static MemorySegment _byteswap_ushort$address() {
        return _byteswap_ushort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned short _byteswap_ushort(unsigned short _Number)
     * }
     */
    public static short _byteswap_ushort(short _Number) {
        var mh$ = _byteswap_ushort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_ushort", _Number);
            }
            return (short)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_byteswap_ulong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_ulong$descriptor() {
        return _byteswap_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static MethodHandle _byteswap_ulong$handle() {
        return _byteswap_ulong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static MemorySegment _byteswap_ulong$address() {
        return _byteswap_ulong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _byteswap_ulong(unsigned long _Number)
     * }
     */
    public static int _byteswap_ulong(int _Number) {
        var mh$ = _byteswap_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_ulong", _Number);
            }
            return (int)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _byteswap_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_byteswap_uint64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static FunctionDescriptor _byteswap_uint64$descriptor() {
        return _byteswap_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static MethodHandle _byteswap_uint64$handle() {
        return _byteswap_uint64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static MemorySegment _byteswap_uint64$address() {
        return _byteswap_uint64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _byteswap_uint64(unsigned long long _Number)
     * }
     */
    public static long _byteswap_uint64(long _Number) {
        var mh$ = _byteswap_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_byteswap_uint64", _Number);
            }
            return (long)mh$.invokeExact(_Number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _div_t.layout(),
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static FunctionDescriptor div$descriptor() {
        return div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MethodHandle div$handle() {
        return div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MemorySegment div$address() {
        return div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * div_t div(int _Numerator, int _Denominator)
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("div", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _ldiv_t.layout(),
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("ldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static FunctionDescriptor ldiv$descriptor() {
        return ldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MethodHandle ldiv$handle() {
        return ldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MemorySegment ldiv$address() {
        return ldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ldiv_t ldiv(long _Numerator, long _Denominator)
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, int _Numerator, int _Denominator) {
        var mh$ = ldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldiv", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _lldiv_t.layout(),
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("lldiv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static FunctionDescriptor lldiv$descriptor() {
        return lldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MethodHandle lldiv$handle() {
        return lldiv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MemorySegment lldiv$address() {
        return lldiv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * lldiv_t lldiv(long long _Numerator, long long _Denominator)
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long _Numerator, long _Denominator) {
        var mh$ = lldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lldiv", allocator, _Numerator, _Denominator);
            }
            return (MemorySegment)mh$.invokeExact(allocator, _Numerator, _Denominator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _rotl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_rotl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int _rotl(unsigned int _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _rotl$descriptor() {
        return _rotl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int _rotl(unsigned int _Value, int _Shift)
     * }
     */
    public static MethodHandle _rotl$handle() {
        return _rotl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int _rotl(unsigned int _Value, int _Shift)
     * }
     */
    public static MemorySegment _rotl$address() {
        return _rotl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int _rotl(unsigned int _Value, int _Shift)
     * }
     */
    public static int _rotl(int _Value, int _Shift) {
        var mh$ = _rotl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_rotl", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lrotl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_lrotl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _lrotl$descriptor() {
        return _lrotl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static MethodHandle _lrotl$handle() {
        return _lrotl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static MemorySegment _lrotl$address() {
        return _lrotl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _lrotl(unsigned long _Value, int _Shift)
     * }
     */
    public static int _lrotl(int _Value, int _Shift) {
        var mh$ = _lrotl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lrotl", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _rotl64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_rotl64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _rotl64(unsigned long long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _rotl64$descriptor() {
        return _rotl64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _rotl64(unsigned long long _Value, int _Shift)
     * }
     */
    public static MethodHandle _rotl64$handle() {
        return _rotl64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _rotl64(unsigned long long _Value, int _Shift)
     * }
     */
    public static MemorySegment _rotl64$address() {
        return _rotl64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _rotl64(unsigned long long _Value, int _Shift)
     * }
     */
    public static long _rotl64(long _Value, int _Shift) {
        var mh$ = _rotl64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_rotl64", _Value, _Shift);
            }
            return (long)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _rotr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_rotr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int _rotr(unsigned int _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _rotr$descriptor() {
        return _rotr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int _rotr(unsigned int _Value, int _Shift)
     * }
     */
    public static MethodHandle _rotr$handle() {
        return _rotr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int _rotr(unsigned int _Value, int _Shift)
     * }
     */
    public static MemorySegment _rotr$address() {
        return _rotr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int _rotr(unsigned int _Value, int _Shift)
     * }
     */
    public static int _rotr(int _Value, int _Shift) {
        var mh$ = _rotr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_rotr", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _lrotr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_lrotr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _lrotr$descriptor() {
        return _lrotr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static MethodHandle _lrotr$handle() {
        return _lrotr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static MemorySegment _lrotr$address() {
        return _lrotr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _lrotr(unsigned long _Value, int _Shift)
     * }
     */
    public static int _lrotr(int _Value, int _Shift) {
        var mh$ = _lrotr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_lrotr", _Value, _Shift);
            }
            return (int)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _rotr64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_rotr64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _rotr64(unsigned long long _Value, int _Shift)
     * }
     */
    public static FunctionDescriptor _rotr64$descriptor() {
        return _rotr64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _rotr64(unsigned long long _Value, int _Shift)
     * }
     */
    public static MethodHandle _rotr64$handle() {
        return _rotr64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _rotr64(unsigned long long _Value, int _Shift)
     * }
     */
    public static MemorySegment _rotr64$address() {
        return _rotr64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _rotr64(unsigned long long _Value, int _Shift)
     * }
     */
    public static long _rotr64(long _Value, int _Shift) {
        var mh$ = _rotr64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_rotr64", _Value, _Shift);
            }
            return (long)mh$.invokeExact(_Value, _Shift);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("srand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static FunctionDescriptor srand$descriptor() {
        return srand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static MethodHandle srand$handle() {
        return srand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static MemorySegment srand$address() {
        return srand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void srand(unsigned int _Seed)
     * }
     */
    public static void srand(int _Seed) {
        var mh$ = srand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand", _Seed);
            }
            mh$.invokeExact(_Seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("rand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static FunctionDescriptor rand$descriptor() {
        return rand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static MethodHandle rand$handle() {
        return rand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static MemorySegment rand$address() {
        return rand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rand()
     * }
     */
    public static int rand() {
        var mh$ = rand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rand");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("atof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static FunctionDescriptor atof$descriptor() {
        return atof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static MethodHandle atof$handle() {
        return atof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static MemorySegment atof$address() {
        return atof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double atof(const char *_String)
     * }
     */
    public static double atof(MemorySegment _String) {
        var mh$ = atof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atof", _String);
            }
            return (double)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("atoi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static FunctionDescriptor atoi$descriptor() {
        return atoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static MethodHandle atoi$handle() {
        return atoi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static MemorySegment atoi$address() {
        return atoi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int atoi(const char *_String)
     * }
     */
    public static int atoi(MemorySegment _String) {
        var mh$ = atoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoi", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("atol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static FunctionDescriptor atol$descriptor() {
        return atol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static MethodHandle atol$handle() {
        return atol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static MemorySegment atol$address() {
        return atol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long atol(const char *_String)
     * }
     */
    public static int atol(MemorySegment _String) {
        var mh$ = atol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atol", _String);
            }
            return (int)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("atoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static FunctionDescriptor atoll$descriptor() {
        return atoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static MethodHandle atoll$handle() {
        return atoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static MemorySegment atoll$address() {
        return atoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long atoll(const char *_String)
     * }
     */
    public static long atoll(MemorySegment _String) {
        var mh$ = atoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoll", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static FunctionDescriptor _atoi64$descriptor() {
        return _atoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static MethodHandle _atoi64$handle() {
        return _atoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static MemorySegment _atoi64$address() {
        return _atoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoi64(const char *_String)
     * }
     */
    public static long _atoi64(MemorySegment _String) {
        var mh$ = _atoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi64", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atof_l$descriptor() {
        return _atof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atof_l$handle() {
        return _atof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atof_l$address() {
        return _atof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _atof_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static double _atof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atof_l", _String, _Locale);
            }
            return (double)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoi_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoi_l$descriptor() {
        return _atoi_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoi_l$handle() {
        return _atoi_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoi_l$address() {
        return _atoi_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoi_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoi_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atol_l$descriptor() {
        return _atol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atol_l$handle() {
        return _atol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atol_l$address() {
        return _atol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _atol_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atol_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atol_l", _String, _Locale);
            }
            return (int)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoll_l$descriptor() {
        return _atoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoll_l$handle() {
        return _atoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoll_l$address() {
        return _atoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoll_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _atoll_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoll_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoi64_l$descriptor() {
        return _atoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoi64_l$handle() {
        return _atoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoi64_l$address() {
        return _atoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _atoi64_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _atoi64_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoi64_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoflt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoflt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static FunctionDescriptor _atoflt$descriptor() {
        return _atoflt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static MethodHandle _atoflt$handle() {
        return _atoflt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static MemorySegment _atoflt$address() {
        return _atoflt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoflt(_CRT_FLOAT *_Result, const char *_String)
     * }
     */
    public static int _atoflt(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoflt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoflt", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atodbl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atodbl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static FunctionDescriptor _atodbl$descriptor() {
        return _atodbl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static MethodHandle _atodbl$handle() {
        return _atodbl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static MemorySegment _atodbl$address() {
        return _atodbl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atodbl(_CRT_DOUBLE *_Result, char *_String)
     * }
     */
    public static int _atodbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atodbl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atodbl", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoldbl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoldbl");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static FunctionDescriptor _atoldbl$descriptor() {
        return _atoldbl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static MethodHandle _atoldbl$handle() {
        return _atoldbl.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static MemorySegment _atoldbl$address() {
        return _atoldbl.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoldbl(_LDOUBLE *_Result, char *_String)
     * }
     */
    public static int _atoldbl(MemorySegment _Result, MemorySegment _String) {
        var mh$ = _atoldbl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoldbl", _Result, _String);
            }
            return (int)mh$.invokeExact(_Result, _String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoflt_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoflt_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoflt_l$descriptor() {
        return _atoflt_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoflt_l$handle() {
        return _atoflt_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoflt_l$address() {
        return _atoflt_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoflt_l(_CRT_FLOAT *_Result, const char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoflt_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoflt_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoflt_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atodbl_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atodbl_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atodbl_l$descriptor() {
        return _atodbl_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atodbl_l$handle() {
        return _atodbl_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atodbl_l$address() {
        return _atodbl_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atodbl_l(_CRT_DOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static int _atodbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atodbl_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atodbl_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _atoldbl_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_atoldbl_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _atoldbl_l$descriptor() {
        return _atoldbl_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _atoldbl_l$handle() {
        return _atoldbl_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _atoldbl_l$address() {
        return _atoldbl_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _atoldbl_l(_LDOUBLE *_Result, char *_String, _locale_t _Locale)
     * }
     */
    public static int _atoldbl_l(MemorySegment _Result, MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atoldbl_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_atoldbl_l", _Result, _String, _Locale);
            }
            return (int)mh$.invokeExact(_Result, _String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_FLOAT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("strtof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtof$descriptor() {
        return strtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtof$handle() {
        return strtof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtof$address() {
        return strtof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float strtof(const char *_String, char **_EndPtr)
     * }
     */
    public static float strtof(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtof", _String, _EndPtr);
            }
            return (float)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtof_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_FLOAT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtof_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtof_l$descriptor() {
        return _strtof_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtof_l$handle() {
        return _strtof_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtof_l$address() {
        return _strtof_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * float _strtof_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static float _strtof_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtof_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtof_l", _String, _EndPtr, _Locale);
            }
            return (float)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("strtod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtod$descriptor() {
        return strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtod$handle() {
        return strtod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtod$address() {
        return strtod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double strtod(const char *_String, char **_EndPtr)
     * }
     */
    public static double strtod(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtod", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtod_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtod_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtod_l$descriptor() {
        return _strtod_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtod_l$handle() {
        return _strtod_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtod_l$address() {
        return _strtod_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double _strtod_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _strtod_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtod_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtod_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("strtold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static FunctionDescriptor strtold$descriptor() {
        return strtold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static MethodHandle strtold$handle() {
        return strtold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static MemorySegment strtold$address() {
        return strtold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double strtold(const char *_String, char **_EndPtr)
     * }
     */
    public static double strtold(MemorySegment _String, MemorySegment _EndPtr) {
        var mh$ = strtold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtold", _String, _EndPtr);
            }
            return (double)mh$.invokeExact(_String, _EndPtr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtold_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtold_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtold_l$descriptor() {
        return _strtold_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtold_l$handle() {
        return _strtold_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtold_l$address() {
        return _strtold_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long double _strtold_l(const char *_String, char **_EndPtr, _locale_t _Locale)
     * }
     */
    public static double _strtold_l(MemorySegment _String, MemorySegment _EndPtr, MemorySegment _Locale) {
        var mh$ = _strtold_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtold_l", _String, _EndPtr, _Locale);
            }
            return (double)mh$.invokeExact(_String, _EndPtr, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("strtol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtol$descriptor() {
        return strtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtol$handle() {
        return strtol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtol$address() {
        return strtol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long strtol(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static int strtol(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtol", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtol_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtol_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtol_l$descriptor() {
        return _strtol_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtol_l$handle() {
        return _strtol_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtol_l$address() {
        return _strtol_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long _strtol_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _strtol_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtol_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtol_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("strtoll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoll$descriptor() {
        return strtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoll$handle() {
        return strtoll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoll$address() {
        return strtoll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long strtoll(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long strtoll(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoll", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtoll_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoll_l$descriptor() {
        return _strtoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoll_l$handle() {
        return _strtoll_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoll_l$address() {
        return _strtoll_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoll_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoll_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoll_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("strtoul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoul$descriptor() {
        return strtoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoul$handle() {
        return strtoul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoul$address() {
        return strtoul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long strtoul(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static int strtoul(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoul", _String, _EndPtr, _Radix);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoul_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtoul_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoul_l$descriptor() {
        return _strtoul_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoul_l$handle() {
        return _strtoul_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoul_l$address() {
        return _strtoul_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long _strtoul_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static int _strtoul_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoul_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoul_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (int)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("strtoull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor strtoull$descriptor() {
        return strtoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle strtoull$handle() {
        return strtoull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment strtoull$address() {
        return strtoull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long strtoull(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long strtoull(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = strtoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoull", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoull_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtoull_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoull_l$descriptor() {
        return _strtoull_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoull_l$handle() {
        return _strtoull_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoull_l$address() {
        return _strtoull_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoull_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoull_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoull_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoull_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoi64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtoi64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _strtoi64$descriptor() {
        return _strtoi64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _strtoi64$handle() {
        return _strtoi64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _strtoi64$address() {
        return _strtoi64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoi64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long _strtoi64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoi64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoi64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoi64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtoi64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoi64_l$descriptor() {
        return _strtoi64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoi64_l$handle() {
        return _strtoi64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoi64_l$address() {
        return _strtoi64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long _strtoi64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoi64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoi64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoi64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoui64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtoui64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static FunctionDescriptor _strtoui64$descriptor() {
        return _strtoui64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MethodHandle _strtoui64$handle() {
        return _strtoui64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static MemorySegment _strtoui64$address() {
        return _strtoui64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoui64(const char *_String, char **_EndPtr, int _Radix)
     * }
     */
    public static long _strtoui64(MemorySegment _String, MemorySegment _EndPtr, int _Radix) {
        var mh$ = _strtoui64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoui64", _String, _EndPtr, _Radix);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _strtoui64_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_strtoui64_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _strtoui64_l$descriptor() {
        return _strtoui64_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MethodHandle _strtoui64_l$handle() {
        return _strtoui64_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static MemorySegment _strtoui64_l$address() {
        return _strtoui64_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long long _strtoui64_l(const char *_String, char **_EndPtr, int _Radix, _locale_t _Locale)
     * }
     */
    public static long _strtoui64_l(MemorySegment _String, MemorySegment _EndPtr, int _Radix, MemorySegment _Locale) {
        var mh$ = _strtoui64_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_strtoui64_l", _String, _EndPtr, _Radix, _Locale);
            }
            return (long)mh$.invokeExact(_String, _EndPtr, _Radix, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_itoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _itoa_s$descriptor() {
        return _itoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _itoa_s$handle() {
        return _itoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _itoa_s$address() {
        return _itoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _itoa_s(int _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _itoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _itoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _itoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_itoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _itoa$descriptor() {
        return _itoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _itoa$handle() {
        return _itoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itoa$address() {
        return _itoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _itoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_itoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ltoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltoa_s$descriptor() {
        return _ltoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ltoa_s$handle() {
        return _ltoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ltoa_s$address() {
        return _ltoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ltoa_s(long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ltoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ltoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ltoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ltoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ltoa$descriptor() {
        return _ltoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ltoa$handle() {
        return _ltoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltoa$address() {
        return _ltoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ltoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ltoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultoa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ultoa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultoa_s$descriptor() {
        return _ultoa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ultoa_s$handle() {
        return _ultoa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ultoa_s$address() {
        return _ultoa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ultoa_s(unsigned long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ultoa_s(int _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ultoa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultoa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ultoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ultoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ultoa$descriptor() {
        return _ultoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ultoa$handle() {
        return _ultoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultoa$address() {
        return _ultoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ultoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ultoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64toa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_i64toa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64toa_s$descriptor() {
        return _i64toa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _i64toa_s$handle() {
        return _i64toa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _i64toa_s$address() {
        return _i64toa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _i64toa_s(long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _i64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _i64toa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64toa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _i64toa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_i64toa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _i64toa$descriptor() {
        return _i64toa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _i64toa$handle() {
        return _i64toa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64toa$address() {
        return _i64toa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_i64toa(long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _i64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _i64toa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_i64toa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64toa_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ui64toa_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64toa_s$descriptor() {
        return _ui64toa_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MethodHandle _ui64toa_s$handle() {
        return _ui64toa_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa_s$address() {
        return _ui64toa_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ui64toa_s(unsigned long long _Value, char *_Buffer, size_t _BufferCount, int _Radix)
     * }
     */
    public static int _ui64toa_s(long _Value, MemorySegment _Buffer, long _BufferCount, int _Radix) {
        var mh$ = _ui64toa_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64toa_s", _Value, _Buffer, _BufferCount, _Radix);
            }
            return (int)mh$.invokeExact(_Value, _Buffer, _BufferCount, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ui64toa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ui64toa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor _ui64toa$descriptor() {
        return _ui64toa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle _ui64toa$handle() {
        return _ui64toa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa$address() {
        return _ui64toa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ui64toa(unsigned long long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment _ui64toa(long _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = _ui64toa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ui64toa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ecvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ecvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _ecvt_s$descriptor() {
        return _ecvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _ecvt_s$handle() {
        return _ecvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt_s$address() {
        return _ecvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _ecvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static int _ecvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ecvt_s", _Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_ecvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _ecvt$descriptor() {
        return _ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _ecvt$handle() {
        return _ecvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt$address() {
        return _ecvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_ecvt", _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fcvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_fcvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _fcvt_s$descriptor() {
        return _fcvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _fcvt_s$handle() {
        return _fcvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt_s$address() {
        return _fcvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _fcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static int _fcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fcvt_s", _Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_fcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor _fcvt$descriptor() {
        return _fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle _fcvt$handle() {
        return _fcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt$address() {
        return _fcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment _fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = _fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fcvt", _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gcvt_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_gcvt_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static FunctionDescriptor _gcvt_s$descriptor() {
        return _gcvt_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static MethodHandle _gcvt_s$handle() {
        return _gcvt_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static MemorySegment _gcvt_s$address() {
        return _gcvt_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _gcvt_s(char *_Buffer, size_t _BufferCount, double _Value, int _DigitCount)
     * }
     */
    public static int _gcvt_s(MemorySegment _Buffer, long _BufferCount, double _Value, int _DigitCount) {
        var mh$ = _gcvt_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gcvt_s", _Buffer, _BufferCount, _Value, _DigitCount);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Value, _DigitCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_gcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static FunctionDescriptor _gcvt$descriptor() {
        return _gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MethodHandle _gcvt$handle() {
        return _gcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MemorySegment _gcvt$address() {
        return _gcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_gcvt(double _Value, int _DigitCount, char *_Buffer)
     * }
     */
    public static MemorySegment _gcvt(double _Value, int _DigitCount, MemorySegment _Buffer) {
        var mh$ = _gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gcvt", _Value, _DigitCount, _Buffer);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ___mb_cur_max_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("___mb_cur_max_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ___mb_cur_max_func()
     * }
     */
    public static FunctionDescriptor ___mb_cur_max_func$descriptor() {
        return ___mb_cur_max_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ___mb_cur_max_func()
     * }
     */
    public static MethodHandle ___mb_cur_max_func$handle() {
        return ___mb_cur_max_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ___mb_cur_max_func()
     * }
     */
    public static MemorySegment ___mb_cur_max_func$address() {
        return ___mb_cur_max_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ___mb_cur_max_func()
     * }
     */
    public static int ___mb_cur_max_func() {
        var mh$ = ___mb_cur_max_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("___mb_cur_max_func");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ___mb_cur_max_l_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("___mb_cur_max_l_func");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ___mb_cur_max_l_func(_locale_t _Locale)
     * }
     */
    public static FunctionDescriptor ___mb_cur_max_l_func$descriptor() {
        return ___mb_cur_max_l_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ___mb_cur_max_l_func(_locale_t _Locale)
     * }
     */
    public static MethodHandle ___mb_cur_max_l_func$handle() {
        return ___mb_cur_max_l_func.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ___mb_cur_max_l_func(_locale_t _Locale)
     * }
     */
    public static MemorySegment ___mb_cur_max_l_func$address() {
        return ___mb_cur_max_l_func.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ___mb_cur_max_l_func(_locale_t _Locale)
     * }
     */
    public static int ___mb_cur_max_l_func(MemorySegment _Locale) {
        var mh$ = ___mb_cur_max_l_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("___mb_cur_max_l_func", _Locale);
            }
            return (int)mh$.invokeExact(_Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mblen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("mblen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mblen$descriptor() {
        return mblen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static MethodHandle mblen$handle() {
        return mblen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static MemorySegment mblen$address() {
        return mblen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mblen(const char *_Ch, size_t _MaxCount)
     * }
     */
    public static int mblen(MemorySegment _Ch, long _MaxCount) {
        var mh$ = mblen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mblen", _Ch, _MaxCount);
            }
            return (int)mh$.invokeExact(_Ch, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mblen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mblen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mblen_l$descriptor() {
        return _mblen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mblen_l$handle() {
        return _mblen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mblen_l$address() {
        return _mblen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _mblen_l(const char *_Ch, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static int _mblen_l(MemorySegment _Ch, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mblen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mblen_l", _Ch, _MaxCount, _Locale);
            }
            return (int)mh$.invokeExact(_Ch, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mbstrlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static FunctionDescriptor _mbstrlen$descriptor() {
        return _mbstrlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static MethodHandle _mbstrlen$handle() {
        return _mbstrlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static MemorySegment _mbstrlen$address() {
        return _mbstrlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrlen(const char *_String)
     * }
     */
    public static long _mbstrlen(MemorySegment _String) {
        var mh$ = _mbstrlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrlen", _String);
            }
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrlen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mbstrlen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstrlen_l$descriptor() {
        return _mbstrlen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstrlen_l$handle() {
        return _mbstrlen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstrlen_l$address() {
        return _mbstrlen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrlen_l(const char *_String, _locale_t _Locale)
     * }
     */
    public static long _mbstrlen_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _mbstrlen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrlen_l", _String, _Locale);
            }
            return (long)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrnlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mbstrnlen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor _mbstrnlen$descriptor() {
        return _mbstrnlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static MethodHandle _mbstrnlen$handle() {
        return _mbstrnlen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static MemorySegment _mbstrnlen$address() {
        return _mbstrnlen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrnlen(const char *_String, size_t _MaxCount)
     * }
     */
    public static long _mbstrnlen(MemorySegment _String, long _MaxCount) {
        var mh$ = _mbstrnlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrnlen", _String, _MaxCount);
            }
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstrnlen_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mbstrnlen_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstrnlen_l$descriptor() {
        return _mbstrnlen_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstrnlen_l$handle() {
        return _mbstrnlen_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstrnlen_l$address() {
        return _mbstrnlen_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstrnlen_l(const char *_String, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _mbstrnlen_l(MemorySegment _String, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstrnlen_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstrnlen_l", _String, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_String, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbtowc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("mbtowc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static FunctionDescriptor mbtowc$descriptor() {
        return mbtowc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static MethodHandle mbtowc$handle() {
        return mbtowc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static MemorySegment mbtowc$address() {
        return mbtowc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int mbtowc(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes)
     * }
     */
    public static int mbtowc(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes) {
        var mh$ = mbtowc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbtowc", _DstCh, _SrcCh, _SrcSizeInBytes);
            }
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbtowc_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mbtowc_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbtowc_l$descriptor() {
        return _mbtowc_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbtowc_l$handle() {
        return _mbtowc_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbtowc_l$address() {
        return _mbtowc_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _mbtowc_l(wchar_t *_DstCh, const char *_SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale)
     * }
     */
    public static int _mbtowc_l(MemorySegment _DstCh, MemorySegment _SrcCh, long _SrcSizeInBytes, MemorySegment _Locale) {
        var mh$ = _mbtowc_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbtowc_l", _DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
            }
            return (int)mh$.invokeExact(_DstCh, _SrcCh, _SrcSizeInBytes, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("mbstowcs_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mbstowcs_s$descriptor() {
        return mbstowcs_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static MethodHandle mbstowcs_s$handle() {
        return mbstowcs_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static MemorySegment mbstowcs_s$address() {
        return mbstowcs_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t mbstowcs_s(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount)
     * }
     */
    public static int mbstowcs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount) {
        var mh$ = mbstowcs_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs_s", _PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("mbstowcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor mbstowcs$descriptor() {
        return mbstowcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static MethodHandle mbstowcs$handle() {
        return mbstowcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static MemorySegment mbstowcs$address() {
        return mbstowcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t mbstowcs(wchar_t *_Dest, const char *_Source, size_t _MaxCount)
     * }
     */
    public static long mbstowcs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = mbstowcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs", _Dest, _Source, _MaxCount);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstowcs_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mbstowcs_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstowcs_s_l$descriptor() {
        return _mbstowcs_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstowcs_s_l$handle() {
        return _mbstowcs_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstowcs_s_l$address() {
        return _mbstowcs_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _mbstowcs_s_l(size_t *_PtNumOfCharConverted, wchar_t *_DstBuf, size_t _SizeInWords, const char *_SrcBuf, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static int _mbstowcs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _DstBuf, long _SizeInWords, MemorySegment _SrcBuf, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstowcs_s_l", _PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _DstBuf, _SizeInWords, _SrcBuf, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _mbstowcs_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_mbstowcs_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _mbstowcs_l$descriptor() {
        return _mbstowcs_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _mbstowcs_l$handle() {
        return _mbstowcs_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _mbstowcs_l$address() {
        return _mbstowcs_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _mbstowcs_l(wchar_t *_Dest, const char *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _mbstowcs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _mbstowcs_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_mbstowcs_l", _Dest, _Source, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_SHORT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wctomb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static FunctionDescriptor wctomb$descriptor() {
        return wctomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static MethodHandle wctomb$handle() {
        return wctomb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static MemorySegment wctomb$address() {
        return wctomb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int wctomb(char *_MbCh, wchar_t _WCh)
     * }
     */
    public static int wctomb(MemorySegment _MbCh, short _WCh) {
        var mh$ = wctomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb", _MbCh, _WCh);
            }
            return (int)mh$.invokeExact(_MbCh, _WCh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wctomb_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_SHORT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wctomb_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wctomb_l$descriptor() {
        return _wctomb_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wctomb_l$handle() {
        return _wctomb_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wctomb_l$address() {
        return _wctomb_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _wctomb_l(char *_MbCh, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static int _wctomb_l(MemorySegment _MbCh, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wctomb_l", _MbCh, _WCh, _Locale);
            }
            return (int)mh$.invokeExact(_MbCh, _WCh, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_SHORT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wctomb_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static FunctionDescriptor wctomb_s$descriptor() {
        return wctomb_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static MethodHandle wctomb_s$handle() {
        return wctomb_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static MemorySegment wctomb_s$address() {
        return wctomb_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t wctomb_s(int *_SizeConverted, char *_MbCh, rsize_t _SizeInBytes, wchar_t _WCh)
     * }
     */
    public static int wctomb_s(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh) {
        var mh$ = wctomb_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb_s", _SizeConverted, _MbCh, _SizeInBytes, _WCh);
            }
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wctomb_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_SHORT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wctomb_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wctomb_s_l$descriptor() {
        return _wctomb_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wctomb_s_l$handle() {
        return _wctomb_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wctomb_s_l$address() {
        return _wctomb_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wctomb_s_l(int *_SizeConverted, char *_MbCh, size_t _SizeInBytes, wchar_t _WCh, _locale_t _Locale)
     * }
     */
    public static int _wctomb_s_l(MemorySegment _SizeConverted, MemorySegment _MbCh, long _SizeInBytes, short _WCh, MemorySegment _Locale) {
        var mh$ = _wctomb_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wctomb_s_l", _SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
            }
            return (int)mh$.invokeExact(_SizeConverted, _MbCh, _SizeInBytes, _WCh, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstombs_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static FunctionDescriptor wcstombs_s$descriptor() {
        return wcstombs_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static MethodHandle wcstombs_s$handle() {
        return wcstombs_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static MemorySegment wcstombs_s$address() {
        return wcstombs_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t wcstombs_s(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes)
     * }
     */
    public static int wcstombs_s(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes) {
        var mh$ = wcstombs_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs_s", _PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("wcstombs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static FunctionDescriptor wcstombs$descriptor() {
        return wcstombs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static MethodHandle wcstombs$handle() {
        return wcstombs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static MemorySegment wcstombs$address() {
        return wcstombs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t wcstombs(char *_Dest, const wchar_t *_Source, size_t _MaxCount)
     * }
     */
    public static long wcstombs(MemorySegment _Dest, MemorySegment _Source, long _MaxCount) {
        var mh$ = wcstombs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs", _Dest, _Source, _MaxCount);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstombs_s_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstombs_s_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstombs_s_l$descriptor() {
        return _wcstombs_s_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstombs_s_l$handle() {
        return _wcstombs_s_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstombs_s_l$address() {
        return _wcstombs_s_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _wcstombs_s_l(size_t *_PtNumOfCharConverted, char *_Dst, size_t _DstSizeInBytes, const wchar_t *_Src, size_t _MaxCountInBytes, _locale_t _Locale)
     * }
     */
    public static int _wcstombs_s_l(MemorySegment _PtNumOfCharConverted, MemorySegment _Dst, long _DstSizeInBytes, MemorySegment _Src, long _MaxCountInBytes, MemorySegment _Locale) {
        var mh$ = _wcstombs_s_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstombs_s_l", _PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
            }
            return (int)mh$.invokeExact(_PtNumOfCharConverted, _Dst, _DstSizeInBytes, _Src, _MaxCountInBytes, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _wcstombs_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_wcstombs_l");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static FunctionDescriptor _wcstombs_l$descriptor() {
        return _wcstombs_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MethodHandle _wcstombs_l$handle() {
        return _wcstombs_l.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static MemorySegment _wcstombs_l$address() {
        return _wcstombs_l.ADDR;
    }

    /**
     * {@snippet lang=c :
     * size_t _wcstombs_l(char *_Dest, const wchar_t *_Source, size_t _MaxCount, _locale_t _Locale)
     * }
     */
    public static long _wcstombs_l(MemorySegment _Dest, MemorySegment _Source, long _MaxCount, MemorySegment _Locale) {
        var mh$ = _wcstombs_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_wcstombs_l", _Dest, _Source, _MaxCount, _Locale);
            }
            return (long)mh$.invokeExact(_Dest, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _fullpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_fullpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _fullpath$descriptor() {
        return _fullpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MethodHandle _fullpath$handle() {
        return _fullpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _fullpath$address() {
        return _fullpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *_fullpath(char *_Buffer, const char *_Path, size_t _BufferCount)
     * }
     */
    public static MemorySegment _fullpath(MemorySegment _Buffer, MemorySegment _Path, long _BufferCount) {
        var mh$ = _fullpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_fullpath", _Buffer, _Path, _BufferCount);
            }
            return (MemorySegment)mh$.invokeExact(_Buffer, _Path, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _makepath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_makepath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static FunctionDescriptor _makepath_s$descriptor() {
        return _makepath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MethodHandle _makepath_s$handle() {
        return _makepath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MemorySegment _makepath_s$address() {
        return _makepath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _makepath_s(char *_Buffer, size_t _BufferCount, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static int _makepath_s(MemorySegment _Buffer, long _BufferCount, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_makepath_s", _Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _makepath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_makepath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static FunctionDescriptor _makepath$descriptor() {
        return _makepath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MethodHandle _makepath$handle() {
        return _makepath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static MemorySegment _makepath$address() {
        return _makepath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _makepath(char *_Buffer, const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext)
     * }
     */
    public static void _makepath(MemorySegment _Buffer, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _makepath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_makepath", _Buffer, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_Buffer, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _splitpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_splitpath");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static FunctionDescriptor _splitpath$descriptor() {
        return _splitpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static MethodHandle _splitpath$handle() {
        return _splitpath.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static MemorySegment _splitpath$address() {
        return _splitpath.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _splitpath(const char *_FullPath, char *_Drive, char *_Dir, char *_Filename, char *_Ext)
     * }
     */
    public static void _splitpath(MemorySegment _FullPath, MemorySegment _Drive, MemorySegment _Dir, MemorySegment _Filename, MemorySegment _Ext) {
        var mh$ = _splitpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_splitpath", _FullPath, _Drive, _Dir, _Filename, _Ext);
            }
            mh$.invokeExact(_FullPath, _Drive, _Dir, _Filename, _Ext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _splitpath_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_splitpath_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static FunctionDescriptor _splitpath_s$descriptor() {
        return _splitpath_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static MethodHandle _splitpath_s$handle() {
        return _splitpath_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static MemorySegment _splitpath_s$address() {
        return _splitpath_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _splitpath_s(const char *_FullPath, char *_Drive, size_t _DriveCount, char *_Dir, size_t _DirCount, char *_Filename, size_t _FilenameCount, char *_Ext, size_t _ExtCount)
     * }
     */
    public static int _splitpath_s(MemorySegment _FullPath, MemorySegment _Drive, long _DriveCount, MemorySegment _Dir, long _DirCount, MemorySegment _Filename, long _FilenameCount, MemorySegment _Ext, long _ExtCount) {
        var mh$ = _splitpath_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_splitpath_s", _FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
            }
            return (int)mh$.invokeExact(_FullPath, _Drive, _DriveCount, _Dir, _DirCount, _Filename, _FilenameCount, _Ext, _ExtCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("getenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static FunctionDescriptor getenv_s$descriptor() {
        return getenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static MethodHandle getenv_s$handle() {
        return getenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static MemorySegment getenv_s$address() {
        return getenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t getenv_s(size_t *_RequiredCount, char *_Buffer, rsize_t _BufferCount, const char *_VarName)
     * }
     */
    public static int getenv_s(MemorySegment _RequiredCount, MemorySegment _Buffer, long _BufferCount, MemorySegment _VarName) {
        var mh$ = getenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv_s", _RequiredCount, _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_RequiredCount, _Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___argc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p___argc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static FunctionDescriptor __p___argc$descriptor() {
        return __p___argc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MethodHandle __p___argc$handle() {
        return __p___argc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MemorySegment __p___argc$address() {
        return __p___argc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *__p___argc()
     * }
     */
    public static MemorySegment __p___argc() {
        var mh$ = __p___argc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___argc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___argv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p___argv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static FunctionDescriptor __p___argv$descriptor() {
        return __p___argv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MethodHandle __p___argv$handle() {
        return __p___argv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MemorySegment __p___argv$address() {
        return __p___argv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char ***__p___argv()
     * }
     */
    public static MemorySegment __p___argv() {
        var mh$ = __p___argv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___argv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p___wargv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p___wargv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static FunctionDescriptor __p___wargv$descriptor() {
        return __p___wargv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MethodHandle __p___wargv$handle() {
        return __p___wargv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MemorySegment __p___wargv$address() {
        return __p___wargv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t ***__p___wargv()
     * }
     */
    public static MemorySegment __p___wargv() {
        var mh$ = __p___wargv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p___wargv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__environ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p__environ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static FunctionDescriptor __p__environ$descriptor() {
        return __p__environ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MethodHandle __p__environ$handle() {
        return __p__environ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MemorySegment __p__environ$address() {
        return __p__environ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char ***__p__environ()
     * }
     */
    public static MemorySegment __p__environ() {
        var mh$ = __p__environ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__environ");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __p__wenviron {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("__p__wenviron");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static FunctionDescriptor __p__wenviron$descriptor() {
        return __p__wenviron.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MethodHandle __p__wenviron$handle() {
        return __p__wenviron.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MemorySegment __p__wenviron$address() {
        return __p__wenviron.ADDR;
    }

    /**
     * {@snippet lang=c :
     * wchar_t ***__p__wenviron()
     * }
     */
    public static MemorySegment __p__wenviron() {
        var mh$ = __p__wenviron.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__p__wenviron");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("getenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static FunctionDescriptor getenv$descriptor() {
        return getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MethodHandle getenv$handle() {
        return getenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MemorySegment getenv$address() {
        return getenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *getenv(const char *_VarName)
     * }
     */
    public static MemorySegment getenv(MemorySegment _VarName) {
        var mh$ = getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv", _VarName);
            }
            return (MemorySegment)mh$.invokeExact(_VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _dupenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_dupenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static FunctionDescriptor _dupenv_s$descriptor() {
        return _dupenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static MethodHandle _dupenv_s$handle() {
        return _dupenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static MemorySegment _dupenv_s$address() {
        return _dupenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _dupenv_s(char **_Buffer, size_t *_BufferCount, const char *_VarName)
     * }
     */
    public static int _dupenv_s(MemorySegment _Buffer, MemorySegment _BufferCount, MemorySegment _VarName) {
        var mh$ = _dupenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_dupenv_s", _Buffer, _BufferCount, _VarName);
            }
            return (int)mh$.invokeExact(_Buffer, _BufferCount, _VarName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class system {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("system");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static FunctionDescriptor system$descriptor() {
        return system.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static MethodHandle system$handle() {
        return system.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static MemorySegment system$address() {
        return system.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int system(const char *_Command)
     * }
     */
    public static int system(MemorySegment _Command) {
        var mh$ = system.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("system", _Command);
            }
            return (int)mh$.invokeExact(_Command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_putenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static FunctionDescriptor _putenv$descriptor() {
        return _putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static MethodHandle _putenv$handle() {
        return _putenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static MemorySegment _putenv$address() {
        return _putenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int _putenv(const char *_EnvString)
     * }
     */
    public static int _putenv(MemorySegment _EnvString) {
        var mh$ = _putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _putenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_putenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static FunctionDescriptor _putenv_s$descriptor() {
        return _putenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static MethodHandle _putenv_s$handle() {
        return _putenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static MemorySegment _putenv_s$address() {
        return _putenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _putenv_s(const char *_Name, const char *_Value)
     * }
     */
    public static int _putenv_s(MemorySegment _Name, MemorySegment _Value) {
        var mh$ = _putenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_putenv_s", _Name, _Value);
            }
            return (int)mh$.invokeExact(_Name, _Value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _searchenv_s {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_searchenv_s");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static FunctionDescriptor _searchenv_s$descriptor() {
        return _searchenv_s.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static MethodHandle _searchenv_s$handle() {
        return _searchenv_s.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static MemorySegment _searchenv_s$address() {
        return _searchenv_s.ADDR;
    }

    /**
     * {@snippet lang=c :
     * errno_t _searchenv_s(const char *_Filename, const char *_VarName, char *_Buffer, size_t _BufferCount)
     * }
     */
    public static int _searchenv_s(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer, long _BufferCount) {
        var mh$ = _searchenv_s.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_searchenv_s", _Filename, _VarName, _Buffer, _BufferCount);
            }
            return (int)mh$.invokeExact(_Filename, _VarName, _Buffer, _BufferCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _searchenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_searchenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static FunctionDescriptor _searchenv$descriptor() {
        return _searchenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static MethodHandle _searchenv$handle() {
        return _searchenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static MemorySegment _searchenv$address() {
        return _searchenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _searchenv(const char *_Filename, const char *_VarName, char *_Buffer)
     * }
     */
    public static void _searchenv(MemorySegment _Filename, MemorySegment _VarName, MemorySegment _Buffer) {
        var mh$ = _searchenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_searchenv", _Filename, _VarName, _Buffer);
            }
            mh$.invokeExact(_Filename, _VarName, _Buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _seterrormode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_seterrormode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static FunctionDescriptor _seterrormode$descriptor() {
        return _seterrormode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static MethodHandle _seterrormode$handle() {
        return _seterrormode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static MemorySegment _seterrormode$address() {
        return _seterrormode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _seterrormode(int _Mode)
     * }
     */
    public static void _seterrormode(int _Mode) {
        var mh$ = _seterrormode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_seterrormode", _Mode);
            }
            mh$.invokeExact(_Mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _beep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_beep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static FunctionDescriptor _beep$descriptor() {
        return _beep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static MethodHandle _beep$handle() {
        return _beep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static MemorySegment _beep$address() {
        return _beep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _beep(unsigned int _Frequency, unsigned int _Duration)
     * }
     */
    public static void _beep(int _Frequency, int _Duration) {
        var mh$ = _beep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_beep", _Frequency, _Duration);
            }
            mh$.invokeExact(_Frequency, _Duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _sleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("_sleep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static FunctionDescriptor _sleep$descriptor() {
        return _sleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static MethodHandle _sleep$handle() {
        return _sleep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static MemorySegment _sleep$address() {
        return _sleep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void _sleep(unsigned long _Duration)
     * }
     */
    public static void _sleep(int _Duration) {
        var mh$ = _sleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_sleep", _Duration);
            }
            mh$.invokeExact(_Duration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("ecvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor ecvt$descriptor() {
        return ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle ecvt$handle() {
        return ecvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment ecvt$address() {
        return ecvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ecvt(double _Value, int _DigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment ecvt(double _Value, int _DigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ecvt", _Value, _DigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("fcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static FunctionDescriptor fcvt$descriptor() {
        return fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MethodHandle fcvt$handle() {
        return fcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment fcvt$address() {
        return fcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fcvt(double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign)
     * }
     */
    public static MemorySegment fcvt(double _Value, int _FractionalDigitCount, MemorySegment _PtDec, MemorySegment _PtSign) {
        var mh$ = fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcvt", _Value, _FractionalDigitCount, _PtDec, _PtSign);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _FractionalDigitCount, _PtDec, _PtSign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("gcvt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static FunctionDescriptor gcvt$descriptor() {
        return gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MethodHandle gcvt$handle() {
        return gcvt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MemorySegment gcvt$address() {
        return gcvt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *gcvt(double _Value, int _DigitCount, char *_DstBuf)
     * }
     */
    public static MemorySegment gcvt(double _Value, int _DigitCount, MemorySegment _DstBuf) {
        var mh$ = gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gcvt", _Value, _DigitCount, _DstBuf);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _DigitCount, _DstBuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class itoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("itoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor itoa$descriptor() {
        return itoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle itoa$handle() {
        return itoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment itoa$address() {
        return itoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *itoa(int _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment itoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = itoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("itoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ltoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("ltoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor ltoa$descriptor() {
        return ltoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle ltoa$handle() {
        return ltoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ltoa$address() {
        return ltoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ltoa(long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ltoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ltoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ltoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class swab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("swab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static FunctionDescriptor swab$descriptor() {
        return swab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MethodHandle swab$handle() {
        return swab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static MemorySegment swab$address() {
        return swab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void swab(char *_Buf1, char *_Buf2, int _SizeInBytes)
     * }
     */
    public static void swab(MemorySegment _Buf1, MemorySegment _Buf2, int _SizeInBytes) {
        var mh$ = swab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("swab", _Buf1, _Buf2, _SizeInBytes);
            }
            mh$.invokeExact(_Buf1, _Buf2, _SizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ultoa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("ultoa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static FunctionDescriptor ultoa$descriptor() {
        return ultoa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MethodHandle ultoa$handle() {
        return ultoa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ultoa$address() {
        return ultoa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ultoa(unsigned long _Value, char *_Buffer, int _Radix)
     * }
     */
    public static MemorySegment ultoa(int _Value, MemorySegment _Buffer, int _Radix) {
        var mh$ = ultoa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ultoa", _Value, _Buffer, _Radix);
            }
            return (MemorySegment)mh$.invokeExact(_Value, _Buffer, _Radix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("putenv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static FunctionDescriptor putenv$descriptor() {
        return putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static MethodHandle putenv$handle() {
        return putenv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static MemorySegment putenv$address() {
        return putenv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putenv(const char *_EnvString)
     * }
     */
    public static int putenv(MemorySegment _EnvString) {
        var mh$ = putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putenv", _EnvString);
            }
            return (int)mh$.invokeExact(_EnvString);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class onexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("onexit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static FunctionDescriptor onexit$descriptor() {
        return onexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MethodHandle onexit$handle() {
        return onexit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment onexit$address() {
        return onexit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * _onexit_t onexit(_onexit_t _Func)
     * }
     */
    public static MemorySegment onexit(MemorySegment _Func) {
        var mh$ = onexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("onexit", _Func);
            }
            return (MemorySegment)mh$.invokeExact(_Func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_TYPE_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_TYPE_UNSPECIFIED = 0
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_TYPE_UNSPECIFIED() {
        return TSURUGI_FFI_ATOM_TYPE_TYPE_UNSPECIFIED;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_BOOLEAN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_BOOLEAN = 1
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_BOOLEAN() {
        return TSURUGI_FFI_ATOM_TYPE_BOOLEAN;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_INT4 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_INT4 = 4
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_INT4() {
        return TSURUGI_FFI_ATOM_TYPE_INT4;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_INT8 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_INT8 = 5
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_INT8() {
        return TSURUGI_FFI_ATOM_TYPE_INT8;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_FLOAT4 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_FLOAT4 = 6
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_FLOAT4() {
        return TSURUGI_FFI_ATOM_TYPE_FLOAT4;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_FLOAT8 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_FLOAT8 = 7
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_FLOAT8() {
        return TSURUGI_FFI_ATOM_TYPE_FLOAT8;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_DECIMAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_DECIMAL = 8
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_DECIMAL() {
        return TSURUGI_FFI_ATOM_TYPE_DECIMAL;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_CHARACTER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_CHARACTER = 9
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_CHARACTER() {
        return TSURUGI_FFI_ATOM_TYPE_CHARACTER;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_OCTET = (int)11L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_OCTET = 11
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_OCTET() {
        return TSURUGI_FFI_ATOM_TYPE_OCTET;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_BIT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_BIT = 13
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_BIT() {
        return TSURUGI_FFI_ATOM_TYPE_BIT;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_DATE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_DATE = 15
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_DATE() {
        return TSURUGI_FFI_ATOM_TYPE_DATE;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY = 16
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY() {
        return TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_TIME_POINT = (int)17L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_TIME_POINT = 17
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_TIME_POINT() {
        return TSURUGI_FFI_ATOM_TYPE_TIME_POINT;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_DATETIME_INTERVAL = (int)18L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_DATETIME_INTERVAL = 18
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_DATETIME_INTERVAL() {
        return TSURUGI_FFI_ATOM_TYPE_DATETIME_INTERVAL;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY_WITH_TIME_ZONE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY_WITH_TIME_ZONE = 19
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY_WITH_TIME_ZONE() {
        return TSURUGI_FFI_ATOM_TYPE_TIME_OF_DAY_WITH_TIME_ZONE;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_TIME_POINT_WITH_TIME_ZONE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_TIME_POINT_WITH_TIME_ZONE = 20
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_TIME_POINT_WITH_TIME_ZONE() {
        return TSURUGI_FFI_ATOM_TYPE_TIME_POINT_WITH_TIME_ZONE;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_CLOB = (int)21L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_CLOB = 21
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_CLOB() {
        return TSURUGI_FFI_ATOM_TYPE_CLOB;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_BLOB = (int)22L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_BLOB = 22
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_BLOB() {
        return TSURUGI_FFI_ATOM_TYPE_BLOB;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_UNKNOWN = (int)31L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_UNKNOWN = 31
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_UNKNOWN() {
        return TSURUGI_FFI_ATOM_TYPE_UNKNOWN;
    }
    private static final int TSURUGI_FFI_ATOM_TYPE_UNRECOGNIZED = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiAtomType.TSURUGI_FFI_ATOM_TYPE_UNRECOGNIZED = -1
     * }
     */
    public static int TSURUGI_FFI_ATOM_TYPE_UNRECOGNIZED() {
        return TSURUGI_FFI_ATOM_TYPE_UNRECOGNIZED;
    }
    /**
     * {@snippet lang=c :
     * typedef int32_t TsurugiFfiAtomType
     * }
     */
    public static final OfInt TsurugiFfiAtomType = tsubakuro_rust_ffi_h.C_INT;
    private static final int TSURUGI_FFI_COMMIT_TYPE_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiCommitType.TSURUGI_FFI_COMMIT_TYPE_UNSPECIFIED = 0
     * }
     */
    public static int TSURUGI_FFI_COMMIT_TYPE_UNSPECIFIED() {
        return TSURUGI_FFI_COMMIT_TYPE_UNSPECIFIED;
    }
    private static final int TSURUGI_FFI_COMMIT_TYPE_ACCEPTED = (int)10L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiCommitType.TSURUGI_FFI_COMMIT_TYPE_ACCEPTED = 10
     * }
     */
    public static int TSURUGI_FFI_COMMIT_TYPE_ACCEPTED() {
        return TSURUGI_FFI_COMMIT_TYPE_ACCEPTED;
    }
    private static final int TSURUGI_FFI_COMMIT_TYPE_AVAILABLE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiCommitType.TSURUGI_FFI_COMMIT_TYPE_AVAILABLE = 20
     * }
     */
    public static int TSURUGI_FFI_COMMIT_TYPE_AVAILABLE() {
        return TSURUGI_FFI_COMMIT_TYPE_AVAILABLE;
    }
    private static final int TSURUGI_FFI_COMMIT_TYPE_STORED = (int)30L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiCommitType.TSURUGI_FFI_COMMIT_TYPE_STORED = 30
     * }
     */
    public static int TSURUGI_FFI_COMMIT_TYPE_STORED() {
        return TSURUGI_FFI_COMMIT_TYPE_STORED;
    }
    private static final int TSURUGI_FFI_COMMIT_TYPE_PROPAGATED = (int)40L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiCommitType.TSURUGI_FFI_COMMIT_TYPE_PROPAGATED = 40
     * }
     */
    public static int TSURUGI_FFI_COMMIT_TYPE_PROPAGATED() {
        return TSURUGI_FFI_COMMIT_TYPE_PROPAGATED;
    }
    /**
     * {@snippet lang=c :
     * typedef int32_t TsurugiFfiCommitType
     * }
     */
    public static final OfInt TsurugiFfiCommitType = tsubakuro_rust_ffi_h.C_INT;
    private static final int TSURUGI_FFI_RC_TYPE_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiRcType.TSURUGI_FFI_RC_TYPE_OK = 0
     * }
     */
    public static int TSURUGI_FFI_RC_TYPE_OK() {
        return TSURUGI_FFI_RC_TYPE_OK;
    }
    private static final int TSURUGI_FFI_RC_TYPE_FFI_ERROR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiRcType.TSURUGI_FFI_RC_TYPE_FFI_ERROR = 1
     * }
     */
    public static int TSURUGI_FFI_RC_TYPE_FFI_ERROR() {
        return TSURUGI_FFI_RC_TYPE_FFI_ERROR;
    }
    private static final int TSURUGI_FFI_RC_TYPE_CORE_CLIENT_ERROR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiRcType.TSURUGI_FFI_RC_TYPE_CORE_CLIENT_ERROR = 2
     * }
     */
    public static int TSURUGI_FFI_RC_TYPE_CORE_CLIENT_ERROR() {
        return TSURUGI_FFI_RC_TYPE_CORE_CLIENT_ERROR;
    }
    private static final int TSURUGI_FFI_RC_TYPE_CORE_SERVER_ERROR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiRcType.TSURUGI_FFI_RC_TYPE_CORE_SERVER_ERROR = 3
     * }
     */
    public static int TSURUGI_FFI_RC_TYPE_CORE_SERVER_ERROR() {
        return TSURUGI_FFI_RC_TYPE_CORE_SERVER_ERROR;
    }
    /**
     * {@snippet lang=c :
     * typedef uint32_t TsurugiFfiRcType
     * }
     */
    public static final OfInt TsurugiFfiRcType = tsubakuro_rust_ffi_h.C_INT;
    private static final int TSURUGI_FFI_TRANSACTION_TYPE_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiTransactionType.TSURUGI_FFI_TRANSACTION_TYPE_UNSPECIFIED = 0
     * }
     */
    public static int TSURUGI_FFI_TRANSACTION_TYPE_UNSPECIFIED() {
        return TSURUGI_FFI_TRANSACTION_TYPE_UNSPECIFIED;
    }
    private static final int TSURUGI_FFI_TRANSACTION_TYPE_SHORT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiTransactionType.TSURUGI_FFI_TRANSACTION_TYPE_SHORT = 1
     * }
     */
    public static int TSURUGI_FFI_TRANSACTION_TYPE_SHORT() {
        return TSURUGI_FFI_TRANSACTION_TYPE_SHORT;
    }
    private static final int TSURUGI_FFI_TRANSACTION_TYPE_LONG = (int)2L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiTransactionType.TSURUGI_FFI_TRANSACTION_TYPE_LONG = 2
     * }
     */
    public static int TSURUGI_FFI_TRANSACTION_TYPE_LONG() {
        return TSURUGI_FFI_TRANSACTION_TYPE_LONG;
    }
    private static final int TSURUGI_FFI_TRANSACTION_TYPE_READ_ONLY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum TsurugiFfiTransactionType.TSURUGI_FFI_TRANSACTION_TYPE_READ_ONLY = 3
     * }
     */
    public static int TSURUGI_FFI_TRANSACTION_TYPE_READ_ONLY() {
        return TSURUGI_FFI_TRANSACTION_TYPE_READ_ONLY;
    }
    /**
     * {@snippet lang=c :
     * typedef int32_t TsurugiFfiTransactionType
     * }
     */
    public static final OfInt TsurugiFfiTransactionType = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t TsurugiFfiRc
     * }
     */
    public static final OfInt TsurugiFfiRc = tsubakuro_rust_ffi_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiContext *TsurugiFfiContextHandle
     * }
     */
    public static final AddressLayout TsurugiFfiContextHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiCancelJob *TsurugiFfiCancelJobHandle
     * }
     */
    public static final AddressLayout TsurugiFfiCancelJobHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef uint64_t TsurugiFfiDuration
     * }
     */
    public static final OfLong TsurugiFfiDuration = tsubakuro_rust_ffi_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef void *TsurugiFfiJobHandle
     * }
     */
    public static final AddressLayout TsurugiFfiJobHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlColumn *TsurugiFfiSqlColumnHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlColumnHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlExecuteResult *TsurugiFfiSqlExecuteResultHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlExecuteResultHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlParameter *TsurugiFfiSqlParameterHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlParameterHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlPlaceholder *TsurugiFfiSqlPlaceholderHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlPlaceholderHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlPreparedStatement *TsurugiFfiSqlPreparedStatementHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlPreparedStatementHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlQueryResult *TsurugiFfiSqlQueryResultHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlQueryResultHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlQueryResultMetadata *TsurugiFfiSqlQueryResultMetadataHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlQueryResultMetadataHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSqlClient *TsurugiFfiSqlClientHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSqlClientHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiTableList *TsurugiFfiTableListHandle
     * }
     */
    public static final AddressLayout TsurugiFfiTableListHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiTableMetadata *TsurugiFfiTableMetadataHandle
     * }
     */
    public static final AddressLayout TsurugiFfiTableMetadataHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiTransactionOption *TsurugiFfiTransactionOptionHandle
     * }
     */
    public static final AddressLayout TsurugiFfiTransactionOptionHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiTransaction *TsurugiFfiTransactionHandle
     * }
     */
    public static final AddressLayout TsurugiFfiTransactionHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiCommitOption *TsurugiFfiCommitOptionHandle
     * }
     */
    public static final AddressLayout TsurugiFfiCommitOptionHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiEndpoint *TsurugiFfiEndpointHandle
     * }
     */
    public static final AddressLayout TsurugiFfiEndpointHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiConnectionOption *TsurugiFfiConnectionOptionHandle
     * }
     */
    public static final AddressLayout TsurugiFfiConnectionOptionHandle = tsubakuro_rust_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct TsurugiFfiSession *TsurugiFfiSessionHandle
     * }
     */
    public static final AddressLayout TsurugiFfiSessionHandle = tsubakuro_rust_ffi_h.C_POINTER;

    private static class tsurugi_ffi_context_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_create(TsurugiFfiContextHandle *context_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_create$descriptor() {
        return tsurugi_ffi_context_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_create(TsurugiFfiContextHandle *context_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_create$handle() {
        return tsurugi_ffi_context_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_create(TsurugiFfiContextHandle *context_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_create$address() {
        return tsurugi_ffi_context_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_create(TsurugiFfiContextHandle *context_out)
     * }
     */
    public static int tsurugi_ffi_context_create(MemorySegment context_out) {
        var mh$ = tsurugi_ffi_context_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_create", context_out);
            }
            return (int)mh$.invokeExact(context_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_return_code {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_return_code");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_return_code(TsurugiFfiContextHandle context, TsurugiFfiRc *rc_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_return_code$descriptor() {
        return tsurugi_ffi_context_get_return_code.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_return_code(TsurugiFfiContextHandle context, TsurugiFfiRc *rc_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_return_code$handle() {
        return tsurugi_ffi_context_get_return_code.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_return_code(TsurugiFfiContextHandle context, TsurugiFfiRc *rc_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_return_code$address() {
        return tsurugi_ffi_context_get_return_code.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_return_code(TsurugiFfiContextHandle context, TsurugiFfiRc *rc_out)
     * }
     */
    public static int tsurugi_ffi_context_get_return_code(MemorySegment context, MemorySegment rc_out) {
        var mh$ = tsurugi_ffi_context_get_return_code.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_return_code", context, rc_out);
            }
            return (int)mh$.invokeExact(context, rc_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_error_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_error_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_name(TsurugiFfiContextHandle context, char **name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_error_name$descriptor() {
        return tsurugi_ffi_context_get_error_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_name(TsurugiFfiContextHandle context, char **name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_error_name$handle() {
        return tsurugi_ffi_context_get_error_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_name(TsurugiFfiContextHandle context, char **name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_error_name$address() {
        return tsurugi_ffi_context_get_error_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_name(TsurugiFfiContextHandle context, char **name_out)
     * }
     */
    public static int tsurugi_ffi_context_get_error_name(MemorySegment context, MemorySegment name_out) {
        var mh$ = tsurugi_ffi_context_get_error_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_error_name", context, name_out);
            }
            return (int)mh$.invokeExact(context, name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_error_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_error_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_type(TsurugiFfiContextHandle context, TsurugiFfiRcType *error_type_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_error_type$descriptor() {
        return tsurugi_ffi_context_get_error_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_type(TsurugiFfiContextHandle context, TsurugiFfiRcType *error_type_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_error_type$handle() {
        return tsurugi_ffi_context_get_error_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_type(TsurugiFfiContextHandle context, TsurugiFfiRcType *error_type_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_error_type$address() {
        return tsurugi_ffi_context_get_error_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_type(TsurugiFfiContextHandle context, TsurugiFfiRcType *error_type_out)
     * }
     */
    public static int tsurugi_ffi_context_get_error_type(MemorySegment context, MemorySegment error_type_out) {
        var mh$ = tsurugi_ffi_context_get_error_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_error_type", context, error_type_out);
            }
            return (int)mh$.invokeExact(context, error_type_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_error_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_error_message");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_message(TsurugiFfiContextHandle context, char **error_message_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_error_message$descriptor() {
        return tsurugi_ffi_context_get_error_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_message(TsurugiFfiContextHandle context, char **error_message_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_error_message$handle() {
        return tsurugi_ffi_context_get_error_message.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_message(TsurugiFfiContextHandle context, char **error_message_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_error_message$address() {
        return tsurugi_ffi_context_get_error_message.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_error_message(TsurugiFfiContextHandle context, char **error_message_out)
     * }
     */
    public static int tsurugi_ffi_context_get_error_message(MemorySegment context, MemorySegment error_message_out) {
        var mh$ = tsurugi_ffi_context_get_error_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_error_message", context, error_message_out);
            }
            return (int)mh$.invokeExact(context, error_message_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_server_error_category_number {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_server_error_category_number");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_number(TsurugiFfiContextHandle context, int32_t *category_number_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_server_error_category_number$descriptor() {
        return tsurugi_ffi_context_get_server_error_category_number.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_number(TsurugiFfiContextHandle context, int32_t *category_number_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_server_error_category_number$handle() {
        return tsurugi_ffi_context_get_server_error_category_number.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_number(TsurugiFfiContextHandle context, int32_t *category_number_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_server_error_category_number$address() {
        return tsurugi_ffi_context_get_server_error_category_number.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_number(TsurugiFfiContextHandle context, int32_t *category_number_out)
     * }
     */
    public static int tsurugi_ffi_context_get_server_error_category_number(MemorySegment context, MemorySegment category_number_out) {
        var mh$ = tsurugi_ffi_context_get_server_error_category_number.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_server_error_category_number", context, category_number_out);
            }
            return (int)mh$.invokeExact(context, category_number_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_server_error_category_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_server_error_category_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_str(TsurugiFfiContextHandle context, char **category_str_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_server_error_category_str$descriptor() {
        return tsurugi_ffi_context_get_server_error_category_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_str(TsurugiFfiContextHandle context, char **category_str_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_server_error_category_str$handle() {
        return tsurugi_ffi_context_get_server_error_category_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_str(TsurugiFfiContextHandle context, char **category_str_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_server_error_category_str$address() {
        return tsurugi_ffi_context_get_server_error_category_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_category_str(TsurugiFfiContextHandle context, char **category_str_out)
     * }
     */
    public static int tsurugi_ffi_context_get_server_error_category_str(MemorySegment context, MemorySegment category_str_out) {
        var mh$ = tsurugi_ffi_context_get_server_error_category_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_server_error_category_str", context, category_str_out);
            }
            return (int)mh$.invokeExact(context, category_str_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_server_error_code_number {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_server_error_code_number");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_code_number(TsurugiFfiContextHandle context, int32_t *code_number_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_server_error_code_number$descriptor() {
        return tsurugi_ffi_context_get_server_error_code_number.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_code_number(TsurugiFfiContextHandle context, int32_t *code_number_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_server_error_code_number$handle() {
        return tsurugi_ffi_context_get_server_error_code_number.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_code_number(TsurugiFfiContextHandle context, int32_t *code_number_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_server_error_code_number$address() {
        return tsurugi_ffi_context_get_server_error_code_number.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_code_number(TsurugiFfiContextHandle context, int32_t *code_number_out)
     * }
     */
    public static int tsurugi_ffi_context_get_server_error_code_number(MemorySegment context, MemorySegment code_number_out) {
        var mh$ = tsurugi_ffi_context_get_server_error_code_number.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_server_error_code_number", context, code_number_out);
            }
            return (int)mh$.invokeExact(context, code_number_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_get_server_error_structured_code {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_get_server_error_structured_code");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_structured_code(TsurugiFfiContextHandle context, char **structured_code_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_get_server_error_structured_code$descriptor() {
        return tsurugi_ffi_context_get_server_error_structured_code.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_structured_code(TsurugiFfiContextHandle context, char **structured_code_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_get_server_error_structured_code$handle() {
        return tsurugi_ffi_context_get_server_error_structured_code.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_structured_code(TsurugiFfiContextHandle context, char **structured_code_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_get_server_error_structured_code$address() {
        return tsurugi_ffi_context_get_server_error_structured_code.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_context_get_server_error_structured_code(TsurugiFfiContextHandle context, char **structured_code_out)
     * }
     */
    public static int tsurugi_ffi_context_get_server_error_structured_code(MemorySegment context, MemorySegment structured_code_out) {
        var mh$ = tsurugi_ffi_context_get_server_error_structured_code.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_get_server_error_structured_code", context, structured_code_out);
            }
            return (int)mh$.invokeExact(context, structured_code_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_context_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_context_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_context_dispose(TsurugiFfiContextHandle context)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_context_dispose$descriptor() {
        return tsurugi_ffi_context_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_context_dispose(TsurugiFfiContextHandle context)
     * }
     */
    public static MethodHandle tsurugi_ffi_context_dispose$handle() {
        return tsurugi_ffi_context_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_context_dispose(TsurugiFfiContextHandle context)
     * }
     */
    public static MemorySegment tsurugi_ffi_context_dispose$address() {
        return tsurugi_ffi_context_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_context_dispose(TsurugiFfiContextHandle context)
     * }
     */
    public static void tsurugi_ffi_context_dispose(MemorySegment context) {
        var mh$ = tsurugi_ffi_context_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_context_dispose", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_cancel_job_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_cancel_job_wait");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_wait(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_cancel_job_wait$descriptor() {
        return tsurugi_ffi_cancel_job_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_wait(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_cancel_job_wait$handle() {
        return tsurugi_ffi_cancel_job_wait.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_wait(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_cancel_job_wait$address() {
        return tsurugi_ffi_cancel_job_wait.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_wait(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static int tsurugi_ffi_cancel_job_wait(MemorySegment context, MemorySegment cancel_job, long timeout, MemorySegment done_out) {
        var mh$ = tsurugi_ffi_cancel_job_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_cancel_job_wait", context, cancel_job, timeout, done_out);
            }
            return (int)mh$.invokeExact(context, cancel_job, timeout, done_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_cancel_job_is_done {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_cancel_job_is_done");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, _Bool *done_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_cancel_job_is_done$descriptor() {
        return tsurugi_ffi_cancel_job_is_done.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, _Bool *done_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_cancel_job_is_done$handle() {
        return tsurugi_ffi_cancel_job_is_done.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, _Bool *done_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_cancel_job_is_done$address() {
        return tsurugi_ffi_cancel_job_is_done.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_cancel_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiCancelJobHandle cancel_job, _Bool *done_out)
     * }
     */
    public static int tsurugi_ffi_cancel_job_is_done(MemorySegment context, MemorySegment cancel_job, MemorySegment done_out) {
        var mh$ = tsurugi_ffi_cancel_job_is_done.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_cancel_job_is_done", context, cancel_job, done_out);
            }
            return (int)mh$.invokeExact(context, cancel_job, done_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_cancel_job_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_cancel_job_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_cancel_job_dispose(TsurugiFfiCancelJobHandle cancel_job)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_cancel_job_dispose$descriptor() {
        return tsurugi_ffi_cancel_job_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_cancel_job_dispose(TsurugiFfiCancelJobHandle cancel_job)
     * }
     */
    public static MethodHandle tsurugi_ffi_cancel_job_dispose$handle() {
        return tsurugi_ffi_cancel_job_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_cancel_job_dispose(TsurugiFfiCancelJobHandle cancel_job)
     * }
     */
    public static MemorySegment tsurugi_ffi_cancel_job_dispose$address() {
        return tsurugi_ffi_cancel_job_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_cancel_job_dispose(TsurugiFfiCancelJobHandle cancel_job)
     * }
     */
    public static void tsurugi_ffi_cancel_job_dispose(MemorySegment cancel_job) {
        var mh$ = tsurugi_ffi_cancel_job_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_cancel_job_dispose", cancel_job);
            }
            mh$.invokeExact(cancel_job);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_get_name(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, char **name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_get_name$descriptor() {
        return tsurugi_ffi_job_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_get_name(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, char **name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_get_name$handle() {
        return tsurugi_ffi_job_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_get_name(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, char **name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_get_name$address() {
        return tsurugi_ffi_job_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_get_name(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, char **name_out)
     * }
     */
    public static int tsurugi_ffi_job_get_name(MemorySegment context, MemorySegment job, MemorySegment name_out) {
        var mh$ = tsurugi_ffi_job_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_get_name", context, job, name_out);
            }
            return (int)mh$.invokeExact(context, job, name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_wait");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_wait(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_wait$descriptor() {
        return tsurugi_ffi_job_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_wait(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_wait$handle() {
        return tsurugi_ffi_job_wait.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_wait(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_wait$address() {
        return tsurugi_ffi_job_wait.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_wait(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, _Bool *done_out)
     * }
     */
    public static int tsurugi_ffi_job_wait(MemorySegment context, MemorySegment job, long timeout, MemorySegment done_out) {
        var mh$ = tsurugi_ffi_job_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_wait", context, job, timeout, done_out);
            }
            return (int)mh$.invokeExact(context, job, timeout, done_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_is_done {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_is_done");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *done_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_is_done$descriptor() {
        return tsurugi_ffi_job_is_done.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *done_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_is_done$handle() {
        return tsurugi_ffi_job_is_done.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *done_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_is_done$address() {
        return tsurugi_ffi_job_is_done.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_is_done(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *done_out)
     * }
     */
    public static int tsurugi_ffi_job_is_done(MemorySegment context, MemorySegment job, MemorySegment done_out) {
        var mh$ = tsurugi_ffi_job_is_done.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_is_done", context, job, done_out);
            }
            return (int)mh$.invokeExact(context, job, done_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_take {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_take");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_take$descriptor() {
        return tsurugi_ffi_job_take.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_take$handle() {
        return tsurugi_ffi_job_take.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_take$address() {
        return tsurugi_ffi_job_take.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static int tsurugi_ffi_job_take(MemorySegment context, MemorySegment job, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_job_take.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_take", context, job, value_out);
            }
            return (int)mh$.invokeExact(context, job, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_take_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_take_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_for(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, void **value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_take_for$descriptor() {
        return tsurugi_ffi_job_take_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_for(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, void **value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_take_for$handle() {
        return tsurugi_ffi_job_take_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_for(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, void **value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_take_for$address() {
        return tsurugi_ffi_job_take_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_for(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiDuration timeout, void **value_out)
     * }
     */
    public static int tsurugi_ffi_job_take_for(MemorySegment context, MemorySegment job, long timeout, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_job_take_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_take_for", context, job, timeout, value_out);
            }
            return (int)mh$.invokeExact(context, job, timeout, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_take_if_ready {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_take_if_ready");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_if_ready(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_take_if_ready$descriptor() {
        return tsurugi_ffi_job_take_if_ready.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_if_ready(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_take_if_ready$handle() {
        return tsurugi_ffi_job_take_if_ready.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_if_ready(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_take_if_ready$address() {
        return tsurugi_ffi_job_take_if_ready.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_take_if_ready(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, void **value_out)
     * }
     */
    public static int tsurugi_ffi_job_take_if_ready(MemorySegment context, MemorySegment job, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_job_take_if_ready.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_take_if_ready", context, job, value_out);
            }
            return (int)mh$.invokeExact(context, job, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_cancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *cancell_done_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_cancel$descriptor() {
        return tsurugi_ffi_job_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *cancell_done_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_cancel$handle() {
        return tsurugi_ffi_job_cancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *cancell_done_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_cancel$address() {
        return tsurugi_ffi_job_cancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, _Bool *cancell_done_out)
     * }
     */
    public static int tsurugi_ffi_job_cancel(MemorySegment context, MemorySegment job, MemorySegment cancell_done_out) {
        var mh$ = tsurugi_ffi_job_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_cancel", context, job, cancell_done_out);
            }
            return (int)mh$.invokeExact(context, job, cancell_done_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_cancel_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_cancel_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel_async(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiCancelJobHandle *cancel_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_cancel_async$descriptor() {
        return tsurugi_ffi_job_cancel_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel_async(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiCancelJobHandle *cancel_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_cancel_async$handle() {
        return tsurugi_ffi_job_cancel_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel_async(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiCancelJobHandle *cancel_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_cancel_async$address() {
        return tsurugi_ffi_job_cancel_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_cancel_async(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job, TsurugiFfiCancelJobHandle *cancel_job_out)
     * }
     */
    public static int tsurugi_ffi_job_cancel_async(MemorySegment context, MemorySegment job, MemorySegment cancel_job_out) {
        var mh$ = tsurugi_ffi_job_cancel_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_cancel_async", context, job, cancel_job_out);
            }
            return (int)mh$.invokeExact(context, job, cancel_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_close(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_close$descriptor() {
        return tsurugi_ffi_job_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_close(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_close$handle() {
        return tsurugi_ffi_job_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_close(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_close$address() {
        return tsurugi_ffi_job_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_job_close(TsurugiFfiContextHandle context, TsurugiFfiJobHandle job)
     * }
     */
    public static int tsurugi_ffi_job_close(MemorySegment context, MemorySegment job) {
        var mh$ = tsurugi_ffi_job_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_close", context, job);
            }
            return (int)mh$.invokeExact(context, job);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_job_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_job_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_job_dispose(TsurugiFfiJobHandle job)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_job_dispose$descriptor() {
        return tsurugi_ffi_job_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_job_dispose(TsurugiFfiJobHandle job)
     * }
     */
    public static MethodHandle tsurugi_ffi_job_dispose$handle() {
        return tsurugi_ffi_job_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_job_dispose(TsurugiFfiJobHandle job)
     * }
     */
    public static MemorySegment tsurugi_ffi_job_dispose$address() {
        return tsurugi_ffi_job_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_job_dispose(TsurugiFfiJobHandle job)
     * }
     */
    public static void tsurugi_ffi_job_dispose(MemorySegment job) {
        var mh$ = tsurugi_ffi_job_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_job_dispose", job);
            }
            mh$.invokeExact(job);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_env_logger_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT    );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_env_logger_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_env_logger_init()
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_env_logger_init$descriptor() {
        return tsurugi_ffi_env_logger_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_env_logger_init()
     * }
     */
    public static MethodHandle tsurugi_ffi_env_logger_init$handle() {
        return tsurugi_ffi_env_logger_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_env_logger_init()
     * }
     */
    public static MemorySegment tsurugi_ffi_env_logger_init$address() {
        return tsurugi_ffi_env_logger_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_env_logger_init()
     * }
     */
    public static int tsurugi_ffi_env_logger_init() {
        var mh$ = tsurugi_ffi_env_logger_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_env_logger_init");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_column_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_column_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, char **name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_column_get_name$descriptor() {
        return tsurugi_ffi_sql_column_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, char **name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_column_get_name$handle() {
        return tsurugi_ffi_sql_column_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, char **name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_column_get_name$address() {
        return tsurugi_ffi_sql_column_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, char **name_out)
     * }
     */
    public static int tsurugi_ffi_sql_column_get_name(MemorySegment context, MemorySegment sql_column, MemorySegment name_out) {
        var mh$ = tsurugi_ffi_sql_column_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_column_get_name", context, sql_column, name_out);
            }
            return (int)mh$.invokeExact(context, sql_column, name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_column_get_atom_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_column_get_atom_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_column_get_atom_type$descriptor() {
        return tsurugi_ffi_sql_column_get_atom_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_column_get_atom_type$handle() {
        return tsurugi_ffi_sql_column_get_atom_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_column_get_atom_type$address() {
        return tsurugi_ffi_sql_column_get_atom_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_column_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlColumnHandle sql_column, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static int tsurugi_ffi_sql_column_get_atom_type(MemorySegment context, MemorySegment sql_column, MemorySegment atom_type_out) {
        var mh$ = tsurugi_ffi_sql_column_get_atom_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_column_get_atom_type", context, sql_column, atom_type_out);
            }
            return (int)mh$.invokeExact(context, sql_column, atom_type_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_column_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_column_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_column_dispose(TsurugiFfiSqlColumnHandle sql_column)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_column_dispose$descriptor() {
        return tsurugi_ffi_sql_column_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_column_dispose(TsurugiFfiSqlColumnHandle sql_column)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_column_dispose$handle() {
        return tsurugi_ffi_sql_column_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_column_dispose(TsurugiFfiSqlColumnHandle sql_column)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_column_dispose$address() {
        return tsurugi_ffi_sql_column_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_column_dispose(TsurugiFfiSqlColumnHandle sql_column)
     * }
     */
    public static void tsurugi_ffi_sql_column_dispose(MemorySegment sql_column) {
        var mh$ = tsurugi_ffi_sql_column_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_column_dispose", sql_column);
            }
            mh$.invokeExact(sql_column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_execute_result_get_inserted_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_execute_result_get_inserted_rows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_inserted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_execute_result_get_inserted_rows$descriptor() {
        return tsurugi_ffi_sql_execute_result_get_inserted_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_inserted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_execute_result_get_inserted_rows$handle() {
        return tsurugi_ffi_sql_execute_result_get_inserted_rows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_inserted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_execute_result_get_inserted_rows$address() {
        return tsurugi_ffi_sql_execute_result_get_inserted_rows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_inserted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static int tsurugi_ffi_sql_execute_result_get_inserted_rows(MemorySegment context, MemorySegment execute_result, MemorySegment rows_out) {
        var mh$ = tsurugi_ffi_sql_execute_result_get_inserted_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_execute_result_get_inserted_rows", context, execute_result, rows_out);
            }
            return (int)mh$.invokeExact(context, execute_result, rows_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_execute_result_get_updated_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_execute_result_get_updated_rows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_updated_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_execute_result_get_updated_rows$descriptor() {
        return tsurugi_ffi_sql_execute_result_get_updated_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_updated_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_execute_result_get_updated_rows$handle() {
        return tsurugi_ffi_sql_execute_result_get_updated_rows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_updated_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_execute_result_get_updated_rows$address() {
        return tsurugi_ffi_sql_execute_result_get_updated_rows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_updated_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static int tsurugi_ffi_sql_execute_result_get_updated_rows(MemorySegment context, MemorySegment execute_result, MemorySegment rows_out) {
        var mh$ = tsurugi_ffi_sql_execute_result_get_updated_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_execute_result_get_updated_rows", context, execute_result, rows_out);
            }
            return (int)mh$.invokeExact(context, execute_result, rows_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_execute_result_get_merged_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_execute_result_get_merged_rows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_merged_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_execute_result_get_merged_rows$descriptor() {
        return tsurugi_ffi_sql_execute_result_get_merged_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_merged_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_execute_result_get_merged_rows$handle() {
        return tsurugi_ffi_sql_execute_result_get_merged_rows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_merged_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_execute_result_get_merged_rows$address() {
        return tsurugi_ffi_sql_execute_result_get_merged_rows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_merged_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static int tsurugi_ffi_sql_execute_result_get_merged_rows(MemorySegment context, MemorySegment execute_result, MemorySegment rows_out) {
        var mh$ = tsurugi_ffi_sql_execute_result_get_merged_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_execute_result_get_merged_rows", context, execute_result, rows_out);
            }
            return (int)mh$.invokeExact(context, execute_result, rows_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_execute_result_get_deleted_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_execute_result_get_deleted_rows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_deleted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_execute_result_get_deleted_rows$descriptor() {
        return tsurugi_ffi_sql_execute_result_get_deleted_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_deleted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_execute_result_get_deleted_rows$handle() {
        return tsurugi_ffi_sql_execute_result_get_deleted_rows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_deleted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_execute_result_get_deleted_rows$address() {
        return tsurugi_ffi_sql_execute_result_get_deleted_rows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_deleted_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static int tsurugi_ffi_sql_execute_result_get_deleted_rows(MemorySegment context, MemorySegment execute_result, MemorySegment rows_out) {
        var mh$ = tsurugi_ffi_sql_execute_result_get_deleted_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_execute_result_get_deleted_rows", context, execute_result, rows_out);
            }
            return (int)mh$.invokeExact(context, execute_result, rows_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_execute_result_get_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_execute_result_get_rows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_execute_result_get_rows$descriptor() {
        return tsurugi_ffi_sql_execute_result_get_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_execute_result_get_rows$handle() {
        return tsurugi_ffi_sql_execute_result_get_rows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_execute_result_get_rows$address() {
        return tsurugi_ffi_sql_execute_result_get_rows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_execute_result_get_rows(TsurugiFfiContextHandle context, TsurugiFfiSqlExecuteResultHandle execute_result, int64_t *rows_out)
     * }
     */
    public static int tsurugi_ffi_sql_execute_result_get_rows(MemorySegment context, MemorySegment execute_result, MemorySegment rows_out) {
        var mh$ = tsurugi_ffi_sql_execute_result_get_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_execute_result_get_rows", context, execute_result, rows_out);
            }
            return (int)mh$.invokeExact(context, execute_result, rows_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_execute_result_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_execute_result_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_execute_result_dispose(TsurugiFfiSqlExecuteResultHandle execute_result)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_execute_result_dispose$descriptor() {
        return tsurugi_ffi_sql_execute_result_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_execute_result_dispose(TsurugiFfiSqlExecuteResultHandle execute_result)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_execute_result_dispose$handle() {
        return tsurugi_ffi_sql_execute_result_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_execute_result_dispose(TsurugiFfiSqlExecuteResultHandle execute_result)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_execute_result_dispose$address() {
        return tsurugi_ffi_sql_execute_result_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_execute_result_dispose(TsurugiFfiSqlExecuteResultHandle execute_result)
     * }
     */
    public static void tsurugi_ffi_sql_execute_result_dispose(MemorySegment execute_result) {
        var mh$ = tsurugi_ffi_sql_execute_result_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_execute_result_dispose", execute_result);
            }
            mh$.invokeExact(execute_result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_null(TsurugiFfiContextHandle context, const char *name, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_null$descriptor() {
        return tsurugi_ffi_sql_parameter_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_null(TsurugiFfiContextHandle context, const char *name, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_null$handle() {
        return tsurugi_ffi_sql_parameter_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_null(TsurugiFfiContextHandle context, const char *name, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_null$address() {
        return tsurugi_ffi_sql_parameter_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_null(TsurugiFfiContextHandle context, const char *name, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static int tsurugi_ffi_sql_parameter_null(MemorySegment context, MemorySegment name, MemorySegment parameter_out) {
        var mh$ = tsurugi_ffi_sql_parameter_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_null", context, name, parameter_out);
            }
            return (int)mh$.invokeExact(context, name, parameter_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_of_int4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_of_int4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int4(TsurugiFfiContextHandle context, const char *name, int32_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_of_int4$descriptor() {
        return tsurugi_ffi_sql_parameter_of_int4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int4(TsurugiFfiContextHandle context, const char *name, int32_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_of_int4$handle() {
        return tsurugi_ffi_sql_parameter_of_int4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int4(TsurugiFfiContextHandle context, const char *name, int32_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_of_int4$address() {
        return tsurugi_ffi_sql_parameter_of_int4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int4(TsurugiFfiContextHandle context, const char *name, int32_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static int tsurugi_ffi_sql_parameter_of_int4(MemorySegment context, MemorySegment name, int value, MemorySegment parameter_out) {
        var mh$ = tsurugi_ffi_sql_parameter_of_int4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_of_int4", context, name, value, parameter_out);
            }
            return (int)mh$.invokeExact(context, name, value, parameter_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_of_int8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_of_int8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int8(TsurugiFfiContextHandle context, const char *name, int64_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_of_int8$descriptor() {
        return tsurugi_ffi_sql_parameter_of_int8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int8(TsurugiFfiContextHandle context, const char *name, int64_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_of_int8$handle() {
        return tsurugi_ffi_sql_parameter_of_int8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int8(TsurugiFfiContextHandle context, const char *name, int64_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_of_int8$address() {
        return tsurugi_ffi_sql_parameter_of_int8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_int8(TsurugiFfiContextHandle context, const char *name, int64_t value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static int tsurugi_ffi_sql_parameter_of_int8(MemorySegment context, MemorySegment name, long value, MemorySegment parameter_out) {
        var mh$ = tsurugi_ffi_sql_parameter_of_int8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_of_int8", context, name, value, parameter_out);
            }
            return (int)mh$.invokeExact(context, name, value, parameter_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_of_float4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_FLOAT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_of_float4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float4(TsurugiFfiContextHandle context, const char *name, float value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_of_float4$descriptor() {
        return tsurugi_ffi_sql_parameter_of_float4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float4(TsurugiFfiContextHandle context, const char *name, float value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_of_float4$handle() {
        return tsurugi_ffi_sql_parameter_of_float4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float4(TsurugiFfiContextHandle context, const char *name, float value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_of_float4$address() {
        return tsurugi_ffi_sql_parameter_of_float4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float4(TsurugiFfiContextHandle context, const char *name, float value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static int tsurugi_ffi_sql_parameter_of_float4(MemorySegment context, MemorySegment name, float value, MemorySegment parameter_out) {
        var mh$ = tsurugi_ffi_sql_parameter_of_float4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_of_float4", context, name, value, parameter_out);
            }
            return (int)mh$.invokeExact(context, name, value, parameter_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_of_float8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_DOUBLE,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_of_float8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float8(TsurugiFfiContextHandle context, const char *name, double value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_of_float8$descriptor() {
        return tsurugi_ffi_sql_parameter_of_float8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float8(TsurugiFfiContextHandle context, const char *name, double value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_of_float8$handle() {
        return tsurugi_ffi_sql_parameter_of_float8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float8(TsurugiFfiContextHandle context, const char *name, double value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_of_float8$address() {
        return tsurugi_ffi_sql_parameter_of_float8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_float8(TsurugiFfiContextHandle context, const char *name, double value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static int tsurugi_ffi_sql_parameter_of_float8(MemorySegment context, MemorySegment name, double value, MemorySegment parameter_out) {
        var mh$ = tsurugi_ffi_sql_parameter_of_float8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_of_float8", context, name, value, parameter_out);
            }
            return (int)mh$.invokeExact(context, name, value, parameter_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_of_character {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_of_character");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_character(TsurugiFfiContextHandle context, const char *name, const char *value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_of_character$descriptor() {
        return tsurugi_ffi_sql_parameter_of_character.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_character(TsurugiFfiContextHandle context, const char *name, const char *value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_of_character$handle() {
        return tsurugi_ffi_sql_parameter_of_character.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_character(TsurugiFfiContextHandle context, const char *name, const char *value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_of_character$address() {
        return tsurugi_ffi_sql_parameter_of_character.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_of_character(TsurugiFfiContextHandle context, const char *name, const char *value, TsurugiFfiSqlParameterHandle *parameter_out)
     * }
     */
    public static int tsurugi_ffi_sql_parameter_of_character(MemorySegment context, MemorySegment name, MemorySegment value, MemorySegment parameter_out) {
        var mh$ = tsurugi_ffi_sql_parameter_of_character.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_of_character", context, name, value, parameter_out);
            }
            return (int)mh$.invokeExact(context, name, value, parameter_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlParameterHandle parameter, char **name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_get_name$descriptor() {
        return tsurugi_ffi_sql_parameter_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlParameterHandle parameter, char **name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_get_name$handle() {
        return tsurugi_ffi_sql_parameter_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlParameterHandle parameter, char **name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_get_name$address() {
        return tsurugi_ffi_sql_parameter_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_parameter_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlParameterHandle parameter, char **name_out)
     * }
     */
    public static int tsurugi_ffi_sql_parameter_get_name(MemorySegment context, MemorySegment parameter, MemorySegment name_out) {
        var mh$ = tsurugi_ffi_sql_parameter_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_get_name", context, parameter, name_out);
            }
            return (int)mh$.invokeExact(context, parameter, name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_parameter_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_parameter_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_parameter_dispose(TsurugiFfiSqlParameterHandle parameter)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_parameter_dispose$descriptor() {
        return tsurugi_ffi_sql_parameter_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_parameter_dispose(TsurugiFfiSqlParameterHandle parameter)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_parameter_dispose$handle() {
        return tsurugi_ffi_sql_parameter_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_parameter_dispose(TsurugiFfiSqlParameterHandle parameter)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_parameter_dispose$address() {
        return tsurugi_ffi_sql_parameter_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_parameter_dispose(TsurugiFfiSqlParameterHandle parameter)
     * }
     */
    public static void tsurugi_ffi_sql_parameter_dispose(MemorySegment parameter) {
        var mh$ = tsurugi_ffi_sql_parameter_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_parameter_dispose", parameter);
            }
            mh$.invokeExact(parameter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_placeholder_of_atom_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_placeholder_of_atom_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_of_atom_type(TsurugiFfiContextHandle context, const char *name, TsurugiFfiAtomType atom_type, TsurugiFfiSqlPlaceholderHandle *placeholder_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_placeholder_of_atom_type$descriptor() {
        return tsurugi_ffi_sql_placeholder_of_atom_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_of_atom_type(TsurugiFfiContextHandle context, const char *name, TsurugiFfiAtomType atom_type, TsurugiFfiSqlPlaceholderHandle *placeholder_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_placeholder_of_atom_type$handle() {
        return tsurugi_ffi_sql_placeholder_of_atom_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_of_atom_type(TsurugiFfiContextHandle context, const char *name, TsurugiFfiAtomType atom_type, TsurugiFfiSqlPlaceholderHandle *placeholder_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_placeholder_of_atom_type$address() {
        return tsurugi_ffi_sql_placeholder_of_atom_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_of_atom_type(TsurugiFfiContextHandle context, const char *name, TsurugiFfiAtomType atom_type, TsurugiFfiSqlPlaceholderHandle *placeholder_out)
     * }
     */
    public static int tsurugi_ffi_sql_placeholder_of_atom_type(MemorySegment context, MemorySegment name, int atom_type, MemorySegment placeholder_out) {
        var mh$ = tsurugi_ffi_sql_placeholder_of_atom_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_placeholder_of_atom_type", context, name, atom_type, placeholder_out);
            }
            return (int)mh$.invokeExact(context, name, atom_type, placeholder_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_placeholder_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_placeholder_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, char **name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_placeholder_get_name$descriptor() {
        return tsurugi_ffi_sql_placeholder_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, char **name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_placeholder_get_name$handle() {
        return tsurugi_ffi_sql_placeholder_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, char **name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_placeholder_get_name$address() {
        return tsurugi_ffi_sql_placeholder_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_name(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, char **name_out)
     * }
     */
    public static int tsurugi_ffi_sql_placeholder_get_name(MemorySegment context, MemorySegment placeholder, MemorySegment name_out) {
        var mh$ = tsurugi_ffi_sql_placeholder_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_placeholder_get_name", context, placeholder, name_out);
            }
            return (int)mh$.invokeExact(context, placeholder, name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_placeholder_get_atom_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_placeholder_get_atom_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_placeholder_get_atom_type$descriptor() {
        return tsurugi_ffi_sql_placeholder_get_atom_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_placeholder_get_atom_type$handle() {
        return tsurugi_ffi_sql_placeholder_get_atom_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_placeholder_get_atom_type$address() {
        return tsurugi_ffi_sql_placeholder_get_atom_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_placeholder_get_atom_type(TsurugiFfiContextHandle context, TsurugiFfiSqlPlaceholderHandle placeholder, TsurugiFfiAtomType *atom_type_out)
     * }
     */
    public static int tsurugi_ffi_sql_placeholder_get_atom_type(MemorySegment context, MemorySegment placeholder, MemorySegment atom_type_out) {
        var mh$ = tsurugi_ffi_sql_placeholder_get_atom_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_placeholder_get_atom_type", context, placeholder, atom_type_out);
            }
            return (int)mh$.invokeExact(context, placeholder, atom_type_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_placeholder_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_placeholder_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_placeholder_dispose(TsurugiFfiSqlPlaceholderHandle placeholder)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_placeholder_dispose$descriptor() {
        return tsurugi_ffi_sql_placeholder_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_placeholder_dispose(TsurugiFfiSqlPlaceholderHandle placeholder)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_placeholder_dispose$handle() {
        return tsurugi_ffi_sql_placeholder_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_placeholder_dispose(TsurugiFfiSqlPlaceholderHandle placeholder)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_placeholder_dispose$address() {
        return tsurugi_ffi_sql_placeholder_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_placeholder_dispose(TsurugiFfiSqlPlaceholderHandle placeholder)
     * }
     */
    public static void tsurugi_ffi_sql_placeholder_dispose(MemorySegment placeholder) {
        var mh$ = tsurugi_ffi_sql_placeholder_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_placeholder_dispose", placeholder);
            }
            mh$.invokeExact(placeholder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_prepared_statement_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_prepared_statement_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_prepared_statement_close(TsurugiFfiContextHandle context, TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_prepared_statement_close$descriptor() {
        return tsurugi_ffi_sql_prepared_statement_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_prepared_statement_close(TsurugiFfiContextHandle context, TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_prepared_statement_close$handle() {
        return tsurugi_ffi_sql_prepared_statement_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_prepared_statement_close(TsurugiFfiContextHandle context, TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_prepared_statement_close$address() {
        return tsurugi_ffi_sql_prepared_statement_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_prepared_statement_close(TsurugiFfiContextHandle context, TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static int tsurugi_ffi_sql_prepared_statement_close(MemorySegment context, MemorySegment prepared_statement) {
        var mh$ = tsurugi_ffi_sql_prepared_statement_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_prepared_statement_close", context, prepared_statement);
            }
            return (int)mh$.invokeExact(context, prepared_statement);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_prepared_statement_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_prepared_statement_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_prepared_statement_dispose(TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_prepared_statement_dispose$descriptor() {
        return tsurugi_ffi_sql_prepared_statement_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_prepared_statement_dispose(TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_prepared_statement_dispose$handle() {
        return tsurugi_ffi_sql_prepared_statement_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_prepared_statement_dispose(TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_prepared_statement_dispose$address() {
        return tsurugi_ffi_sql_prepared_statement_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_prepared_statement_dispose(TsurugiFfiSqlPreparedStatementHandle prepared_statement)
     * }
     */
    public static void tsurugi_ffi_sql_prepared_statement_dispose(MemorySegment prepared_statement) {
        var mh$ = tsurugi_ffi_sql_prepared_statement_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_prepared_statement_dispose", prepared_statement);
            }
            mh$.invokeExact(prepared_statement);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_get_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_get_metadata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_get_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, TsurugiFfiSqlQueryResultMetadataHandle *metadata_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_get_metadata$descriptor() {
        return tsurugi_ffi_sql_query_result_get_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_get_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, TsurugiFfiSqlQueryResultMetadataHandle *metadata_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_get_metadata$handle() {
        return tsurugi_ffi_sql_query_result_get_metadata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_get_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, TsurugiFfiSqlQueryResultMetadataHandle *metadata_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_get_metadata$address() {
        return tsurugi_ffi_sql_query_result_get_metadata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_get_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, TsurugiFfiSqlQueryResultMetadataHandle *metadata_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_get_metadata(MemorySegment context, MemorySegment query_result, MemorySegment metadata_out) {
        var mh$ = tsurugi_ffi_sql_query_result_get_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_get_metadata", context, query_result, metadata_out);
            }
            return (int)mh$.invokeExact(context, query_result, metadata_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_next_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_next_row");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_row(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_row_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_next_row$descriptor() {
        return tsurugi_ffi_sql_query_result_next_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_row(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_row_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_next_row$handle() {
        return tsurugi_ffi_sql_query_result_next_row.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_row(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_row_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_next_row$address() {
        return tsurugi_ffi_sql_query_result_next_row.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_row(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_row_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_next_row(MemorySegment context, MemorySegment query_result, MemorySegment has_row_out) {
        var mh$ = tsurugi_ffi_sql_query_result_next_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_next_row", context, query_result, has_row_out);
            }
            return (int)mh$.invokeExact(context, query_result, has_row_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_next_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_next_column");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_column(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_column_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_next_column$descriptor() {
        return tsurugi_ffi_sql_query_result_next_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_column(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_column_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_next_column$handle() {
        return tsurugi_ffi_sql_query_result_next_column.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_column(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_column_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_next_column$address() {
        return tsurugi_ffi_sql_query_result_next_column.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_next_column(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *has_column_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_next_column(MemorySegment context, MemorySegment query_result, MemorySegment has_column_out) {
        var mh$ = tsurugi_ffi_sql_query_result_next_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_next_column", context, query_result, has_column_out);
            }
            return (int)mh$.invokeExact(context, query_result, has_column_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_is_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_is_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_is_null(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *is_null_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_is_null$descriptor() {
        return tsurugi_ffi_sql_query_result_is_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_is_null(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *is_null_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_is_null$handle() {
        return tsurugi_ffi_sql_query_result_is_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_is_null(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *is_null_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_is_null$address() {
        return tsurugi_ffi_sql_query_result_is_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_is_null(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, _Bool *is_null_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_is_null(MemorySegment context, MemorySegment query_result, MemorySegment is_null_out) {
        var mh$ = tsurugi_ffi_sql_query_result_is_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_is_null", context, query_result, is_null_out);
            }
            return (int)mh$.invokeExact(context, query_result, is_null_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_fetch_int4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_fetch_int4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int32_t *value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_fetch_int4$descriptor() {
        return tsurugi_ffi_sql_query_result_fetch_int4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int32_t *value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_fetch_int4$handle() {
        return tsurugi_ffi_sql_query_result_fetch_int4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int32_t *value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_fetch_int4$address() {
        return tsurugi_ffi_sql_query_result_fetch_int4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int32_t *value_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_fetch_int4(MemorySegment context, MemorySegment query_result, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_sql_query_result_fetch_int4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_fetch_int4", context, query_result, value_out);
            }
            return (int)mh$.invokeExact(context, query_result, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_fetch_int8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_fetch_int8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int64_t *value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_fetch_int8$descriptor() {
        return tsurugi_ffi_sql_query_result_fetch_int8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int64_t *value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_fetch_int8$handle() {
        return tsurugi_ffi_sql_query_result_fetch_int8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int64_t *value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_fetch_int8$address() {
        return tsurugi_ffi_sql_query_result_fetch_int8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_int8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, int64_t *value_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_fetch_int8(MemorySegment context, MemorySegment query_result, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_sql_query_result_fetch_int8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_fetch_int8", context, query_result, value_out);
            }
            return (int)mh$.invokeExact(context, query_result, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_fetch_float4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_fetch_float4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, float *value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_fetch_float4$descriptor() {
        return tsurugi_ffi_sql_query_result_fetch_float4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, float *value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_fetch_float4$handle() {
        return tsurugi_ffi_sql_query_result_fetch_float4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, float *value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_fetch_float4$address() {
        return tsurugi_ffi_sql_query_result_fetch_float4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float4(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, float *value_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_fetch_float4(MemorySegment context, MemorySegment query_result, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_sql_query_result_fetch_float4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_fetch_float4", context, query_result, value_out);
            }
            return (int)mh$.invokeExact(context, query_result, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_fetch_float8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_fetch_float8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, double *value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_fetch_float8$descriptor() {
        return tsurugi_ffi_sql_query_result_fetch_float8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, double *value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_fetch_float8$handle() {
        return tsurugi_ffi_sql_query_result_fetch_float8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, double *value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_fetch_float8$address() {
        return tsurugi_ffi_sql_query_result_fetch_float8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_float8(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, double *value_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_fetch_float8(MemorySegment context, MemorySegment query_result, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_sql_query_result_fetch_float8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_fetch_float8", context, query_result, value_out);
            }
            return (int)mh$.invokeExact(context, query_result, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_fetch_character {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_fetch_character");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_character(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, char **value_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_fetch_character$descriptor() {
        return tsurugi_ffi_sql_query_result_fetch_character.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_character(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, char **value_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_fetch_character$handle() {
        return tsurugi_ffi_sql_query_result_fetch_character.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_character(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, char **value_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_fetch_character$address() {
        return tsurugi_ffi_sql_query_result_fetch_character.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_fetch_character(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultHandle query_result, char **value_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_fetch_character(MemorySegment context, MemorySegment query_result, MemorySegment value_out) {
        var mh$ = tsurugi_ffi_sql_query_result_fetch_character.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_fetch_character", context, query_result, value_out);
            }
            return (int)mh$.invokeExact(context, query_result, value_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_dispose(TsurugiFfiSqlQueryResultHandle query_result)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_dispose$descriptor() {
        return tsurugi_ffi_sql_query_result_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_dispose(TsurugiFfiSqlQueryResultHandle query_result)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_dispose$handle() {
        return tsurugi_ffi_sql_query_result_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_dispose(TsurugiFfiSqlQueryResultHandle query_result)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_dispose$address() {
        return tsurugi_ffi_sql_query_result_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_dispose(TsurugiFfiSqlQueryResultHandle query_result)
     * }
     */
    public static void tsurugi_ffi_sql_query_result_dispose(MemorySegment query_result) {
        var mh$ = tsurugi_ffi_sql_query_result_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_dispose", query_result);
            }
            mh$.invokeExact(query_result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_metadata_get_columns_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_metadata_get_columns_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t *size_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_metadata_get_columns_size$descriptor() {
        return tsurugi_ffi_sql_query_result_metadata_get_columns_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t *size_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_metadata_get_columns_size$handle() {
        return tsurugi_ffi_sql_query_result_metadata_get_columns_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t *size_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_metadata_get_columns_size$address() {
        return tsurugi_ffi_sql_query_result_metadata_get_columns_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t *size_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_metadata_get_columns_size(MemorySegment context, MemorySegment query_result_metadata, MemorySegment size_out) {
        var mh$ = tsurugi_ffi_sql_query_result_metadata_get_columns_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_metadata_get_columns_size", context, query_result_metadata, size_out);
            }
            return (int)mh$.invokeExact(context, query_result_metadata, size_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_metadata_get_columns_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_metadata_get_columns_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_metadata_get_columns_value$descriptor() {
        return tsurugi_ffi_sql_query_result_metadata_get_columns_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_metadata_get_columns_value$handle() {
        return tsurugi_ffi_sql_query_result_metadata_get_columns_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_metadata_get_columns_value$address() {
        return tsurugi_ffi_sql_query_result_metadata_get_columns_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_query_result_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static int tsurugi_ffi_sql_query_result_metadata_get_columns_value(MemorySegment context, MemorySegment query_result_metadata, int index, MemorySegment sql_column_out) {
        var mh$ = tsurugi_ffi_sql_query_result_metadata_get_columns_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_metadata_get_columns_value", context, query_result_metadata, index, sql_column_out);
            }
            return (int)mh$.invokeExact(context, query_result_metadata, index, sql_column_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_query_result_metadata_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_query_result_metadata_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_metadata_dispose(TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_query_result_metadata_dispose$descriptor() {
        return tsurugi_ffi_sql_query_result_metadata_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_metadata_dispose(TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_query_result_metadata_dispose$handle() {
        return tsurugi_ffi_sql_query_result_metadata_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_metadata_dispose(TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_query_result_metadata_dispose$address() {
        return tsurugi_ffi_sql_query_result_metadata_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_query_result_metadata_dispose(TsurugiFfiSqlQueryResultMetadataHandle query_result_metadata)
     * }
     */
    public static void tsurugi_ffi_sql_query_result_metadata_dispose(MemorySegment query_result_metadata) {
        var mh$ = tsurugi_ffi_sql_query_result_metadata_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_query_result_metadata_dispose", query_result_metadata);
            }
            mh$.invokeExact(query_result_metadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_list_tables {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_list_tables");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_list_tables$descriptor() {
        return tsurugi_ffi_sql_client_list_tables.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_list_tables$handle() {
        return tsurugi_ffi_sql_client_list_tables.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_list_tables$address() {
        return tsurugi_ffi_sql_client_list_tables.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_list_tables(MemorySegment context, MemorySegment sql_client, MemorySegment table_list_out) {
        var mh$ = tsurugi_ffi_sql_client_list_tables.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_list_tables", context, sql_client, table_list_out);
            }
            return (int)mh$.invokeExact(context, sql_client, table_list_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_list_tables_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_list_tables_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiDuration timeout, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_list_tables_for$descriptor() {
        return tsurugi_ffi_sql_client_list_tables_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiDuration timeout, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_list_tables_for$handle() {
        return tsurugi_ffi_sql_client_list_tables_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiDuration timeout, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_list_tables_for$address() {
        return tsurugi_ffi_sql_client_list_tables_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiDuration timeout, TsurugiFfiTableListHandle *table_list_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_list_tables_for(MemorySegment context, MemorySegment sql_client, long timeout, MemorySegment table_list_out) {
        var mh$ = tsurugi_ffi_sql_client_list_tables_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_list_tables_for", context, sql_client, timeout, table_list_out);
            }
            return (int)mh$.invokeExact(context, sql_client, timeout, table_list_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_list_tables_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_list_tables_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiJobHandle *table_list_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_list_tables_async$descriptor() {
        return tsurugi_ffi_sql_client_list_tables_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiJobHandle *table_list_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_list_tables_async$handle() {
        return tsurugi_ffi_sql_client_list_tables_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiJobHandle *table_list_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_list_tables_async$address() {
        return tsurugi_ffi_sql_client_list_tables_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_list_tables_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiJobHandle *table_list_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_list_tables_async(MemorySegment context, MemorySegment sql_client, MemorySegment table_list_job_out) {
        var mh$ = tsurugi_ffi_sql_client_list_tables_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_list_tables_async", context, sql_client, table_list_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, table_list_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_get_table_metadata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_get_table_metadata");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_get_table_metadata$descriptor() {
        return tsurugi_ffi_sql_client_get_table_metadata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_get_table_metadata$handle() {
        return tsurugi_ffi_sql_client_get_table_metadata.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_get_table_metadata$address() {
        return tsurugi_ffi_sql_client_get_table_metadata.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_get_table_metadata(MemorySegment context, MemorySegment sql_client, MemorySegment table_name, MemorySegment table_metadata_out) {
        var mh$ = tsurugi_ffi_sql_client_get_table_metadata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_get_table_metadata", context, sql_client, table_name, table_metadata_out);
            }
            return (int)mh$.invokeExact(context, sql_client, table_name, table_metadata_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_get_table_metadata_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_get_table_metadata_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiDuration timeout, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_get_table_metadata_for$descriptor() {
        return tsurugi_ffi_sql_client_get_table_metadata_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiDuration timeout, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_get_table_metadata_for$handle() {
        return tsurugi_ffi_sql_client_get_table_metadata_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiDuration timeout, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_get_table_metadata_for$address() {
        return tsurugi_ffi_sql_client_get_table_metadata_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiDuration timeout, TsurugiFfiTableMetadataHandle *table_metadata_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_get_table_metadata_for(MemorySegment context, MemorySegment sql_client, MemorySegment table_name, long timeout, MemorySegment table_metadata_out) {
        var mh$ = tsurugi_ffi_sql_client_get_table_metadata_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_get_table_metadata_for", context, sql_client, table_name, timeout, table_metadata_out);
            }
            return (int)mh$.invokeExact(context, sql_client, table_name, timeout, table_metadata_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_get_table_metadata_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_get_table_metadata_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiJobHandle *table_metadata_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_get_table_metadata_async$descriptor() {
        return tsurugi_ffi_sql_client_get_table_metadata_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiJobHandle *table_metadata_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_get_table_metadata_async$handle() {
        return tsurugi_ffi_sql_client_get_table_metadata_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiJobHandle *table_metadata_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_get_table_metadata_async$address() {
        return tsurugi_ffi_sql_client_get_table_metadata_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_get_table_metadata_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *table_name, TsurugiFfiJobHandle *table_metadata_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_get_table_metadata_async(MemorySegment context, MemorySegment sql_client, MemorySegment table_name, MemorySegment table_metadata_job_out) {
        var mh$ = tsurugi_ffi_sql_client_get_table_metadata_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_get_table_metadata_async", context, sql_client, table_name, table_metadata_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, table_name, table_metadata_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepare$descriptor() {
        return tsurugi_ffi_sql_client_prepare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepare$handle() {
        return tsurugi_ffi_sql_client_prepare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepare$address() {
        return tsurugi_ffi_sql_client_prepare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepare(MemorySegment context, MemorySegment sql_client, MemorySegment sql, MemorySegment placeholders, int placeholder_size, MemorySegment prepared_statement_out) {
        var mh$ = tsurugi_ffi_sql_client_prepare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepare", context, sql_client, sql, placeholders, placeholder_size, prepared_statement_out);
            }
            return (int)mh$.invokeExact(context, sql_client, sql, placeholders, placeholder_size, prepared_statement_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepare_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepare_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiDuration timeout, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepare_for$descriptor() {
        return tsurugi_ffi_sql_client_prepare_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiDuration timeout, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepare_for$handle() {
        return tsurugi_ffi_sql_client_prepare_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiDuration timeout, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepare_for$address() {
        return tsurugi_ffi_sql_client_prepare_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiDuration timeout, TsurugiFfiSqlPreparedStatementHandle *prepared_statement_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepare_for(MemorySegment context, MemorySegment sql_client, MemorySegment sql, MemorySegment placeholders, int placeholder_size, long timeout, MemorySegment prepared_statement_out) {
        var mh$ = tsurugi_ffi_sql_client_prepare_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepare_for", context, sql_client, sql, placeholders, placeholder_size, timeout, prepared_statement_out);
            }
            return (int)mh$.invokeExact(context, sql_client, sql, placeholders, placeholder_size, timeout, prepared_statement_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepare_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepare_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiJobHandle *prepared_statement_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepare_async$descriptor() {
        return tsurugi_ffi_sql_client_prepare_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiJobHandle *prepared_statement_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepare_async$handle() {
        return tsurugi_ffi_sql_client_prepare_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiJobHandle *prepared_statement_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepare_async$address() {
        return tsurugi_ffi_sql_client_prepare_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepare_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, const char *sql, const TsurugiFfiSqlPlaceholderHandle *placeholders, uint32_t placeholder_size, TsurugiFfiJobHandle *prepared_statement_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepare_async(MemorySegment context, MemorySegment sql_client, MemorySegment sql, MemorySegment placeholders, int placeholder_size, MemorySegment prepared_statement_job_out) {
        var mh$ = tsurugi_ffi_sql_client_prepare_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepare_async", context, sql_client, sql, placeholders, placeholder_size, prepared_statement_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, sql, placeholders, placeholder_size, prepared_statement_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_start_transaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_start_transaction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_start_transaction$descriptor() {
        return tsurugi_ffi_sql_client_start_transaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_start_transaction$handle() {
        return tsurugi_ffi_sql_client_start_transaction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_start_transaction$address() {
        return tsurugi_ffi_sql_client_start_transaction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_start_transaction(MemorySegment context, MemorySegment sql_client, MemorySegment transaction_option, MemorySegment transaction_out) {
        var mh$ = tsurugi_ffi_sql_client_start_transaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_start_transaction", context, sql_client, transaction_option, transaction_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction_option, transaction_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_start_transaction_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_start_transaction_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiDuration timeout, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_start_transaction_for$descriptor() {
        return tsurugi_ffi_sql_client_start_transaction_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiDuration timeout, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_start_transaction_for$handle() {
        return tsurugi_ffi_sql_client_start_transaction_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiDuration timeout, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_start_transaction_for$address() {
        return tsurugi_ffi_sql_client_start_transaction_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiDuration timeout, TsurugiFfiTransactionHandle *transaction_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_start_transaction_for(MemorySegment context, MemorySegment sql_client, MemorySegment transaction_option, long timeout, MemorySegment transaction_out) {
        var mh$ = tsurugi_ffi_sql_client_start_transaction_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_start_transaction_for", context, sql_client, transaction_option, timeout, transaction_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction_option, timeout, transaction_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_start_transaction_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_start_transaction_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiJobHandle *transaction_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_start_transaction_async$descriptor() {
        return tsurugi_ffi_sql_client_start_transaction_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiJobHandle *transaction_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_start_transaction_async$handle() {
        return tsurugi_ffi_sql_client_start_transaction_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiJobHandle *transaction_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_start_transaction_async$address() {
        return tsurugi_ffi_sql_client_start_transaction_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_start_transaction_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiJobHandle *transaction_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_start_transaction_async(MemorySegment context, MemorySegment sql_client, MemorySegment transaction_option, MemorySegment transaction_job_out) {
        var mh$ = tsurugi_ffi_sql_client_start_transaction_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_start_transaction_async", context, sql_client, transaction_option, transaction_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction_option, transaction_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_execute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_execute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_execute$descriptor() {
        return tsurugi_ffi_sql_client_execute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_execute$handle() {
        return tsurugi_ffi_sql_client_execute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_execute$address() {
        return tsurugi_ffi_sql_client_execute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_execute(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment sql, MemorySegment execute_result_out) {
        var mh$ = tsurugi_ffi_sql_client_execute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_execute", context, sql_client, transaction, sql, execute_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, sql, execute_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_execute_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_execute_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_execute_for$descriptor() {
        return tsurugi_ffi_sql_client_execute_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_execute_for$handle() {
        return tsurugi_ffi_sql_client_execute_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_execute_for$address() {
        return tsurugi_ffi_sql_client_execute_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_execute_for(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment sql, long timeout, MemorySegment execute_result_out) {
        var mh$ = tsurugi_ffi_sql_client_execute_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_execute_for", context, sql_client, transaction, sql, timeout, execute_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, sql, timeout, execute_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_execute_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_execute_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_execute_async$descriptor() {
        return tsurugi_ffi_sql_client_execute_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_execute_async$handle() {
        return tsurugi_ffi_sql_client_execute_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_execute_async$address() {
        return tsurugi_ffi_sql_client_execute_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_execute_async(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment sql, MemorySegment execute_result_job_out) {
        var mh$ = tsurugi_ffi_sql_client_execute_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_execute_async", context, sql_client, transaction, sql, execute_result_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, sql, execute_result_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepared_execute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepared_execute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepared_execute$descriptor() {
        return tsurugi_ffi_sql_client_prepared_execute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepared_execute$handle() {
        return tsurugi_ffi_sql_client_prepared_execute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepared_execute$address() {
        return tsurugi_ffi_sql_client_prepared_execute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepared_execute(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment prepared_statement, MemorySegment parameters, int parameter_size, MemorySegment execute_result_out) {
        var mh$ = tsurugi_ffi_sql_client_prepared_execute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepared_execute", context, sql_client, transaction, prepared_statement, parameters, parameter_size, execute_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, prepared_statement, parameters, parameter_size, execute_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepared_execute_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepared_execute_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepared_execute_for$descriptor() {
        return tsurugi_ffi_sql_client_prepared_execute_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepared_execute_for$handle() {
        return tsurugi_ffi_sql_client_prepared_execute_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepared_execute_for$address() {
        return tsurugi_ffi_sql_client_prepared_execute_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlExecuteResultHandle *execute_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepared_execute_for(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment prepared_statement, MemorySegment parameters, int parameter_size, long timeout, MemorySegment execute_result_out) {
        var mh$ = tsurugi_ffi_sql_client_prepared_execute_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepared_execute_for", context, sql_client, transaction, prepared_statement, parameters, parameter_size, timeout, execute_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, prepared_statement, parameters, parameter_size, timeout, execute_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepared_execute_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepared_execute_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepared_execute_async$descriptor() {
        return tsurugi_ffi_sql_client_prepared_execute_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepared_execute_async$handle() {
        return tsurugi_ffi_sql_client_prepared_execute_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepared_execute_async$address() {
        return tsurugi_ffi_sql_client_prepared_execute_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_execute_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *execute_result_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepared_execute_async(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment prepared_statement, MemorySegment parameters, int parameter_size, MemorySegment execute_result_job_out) {
        var mh$ = tsurugi_ffi_sql_client_prepared_execute_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepared_execute_async", context, sql_client, transaction, prepared_statement, parameters, parameter_size, execute_result_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, prepared_statement, parameters, parameter_size, execute_result_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_query");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_query$descriptor() {
        return tsurugi_ffi_sql_client_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_query$handle() {
        return tsurugi_ffi_sql_client_query.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_query$address() {
        return tsurugi_ffi_sql_client_query.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_query(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment sql, MemorySegment query_result_out) {
        var mh$ = tsurugi_ffi_sql_client_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_query", context, sql_client, transaction, sql, query_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, sql, query_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_query_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_query_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_query_for$descriptor() {
        return tsurugi_ffi_sql_client_query_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_query_for$handle() {
        return tsurugi_ffi_sql_client_query_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_query_for$address() {
        return tsurugi_ffi_sql_client_query_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_query_for(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment sql, long timeout, MemorySegment query_result_out) {
        var mh$ = tsurugi_ffi_sql_client_query_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_query_for", context, sql_client, transaction, sql, timeout, query_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, sql, timeout, query_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_query_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_query_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_query_async$descriptor() {
        return tsurugi_ffi_sql_client_query_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_query_async$handle() {
        return tsurugi_ffi_sql_client_query_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_query_async$address() {
        return tsurugi_ffi_sql_client_query_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, const char *sql, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_query_async(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment sql, MemorySegment query_result_job_out) {
        var mh$ = tsurugi_ffi_sql_client_query_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_query_async", context, sql_client, transaction, sql, query_result_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, sql, query_result_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepared_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepared_query");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepared_query$descriptor() {
        return tsurugi_ffi_sql_client_prepared_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepared_query$handle() {
        return tsurugi_ffi_sql_client_prepared_query.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepared_query$address() {
        return tsurugi_ffi_sql_client_prepared_query.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepared_query(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment prepared_statement, MemorySegment parameters, int parameter_size, MemorySegment query_result_out) {
        var mh$ = tsurugi_ffi_sql_client_prepared_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepared_query", context, sql_client, transaction, prepared_statement, parameters, parameter_size, query_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, prepared_statement, parameters, parameter_size, query_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepared_query_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepared_query_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepared_query_for$descriptor() {
        return tsurugi_ffi_sql_client_prepared_query_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepared_query_for$handle() {
        return tsurugi_ffi_sql_client_prepared_query_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepared_query_for$address() {
        return tsurugi_ffi_sql_client_prepared_query_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiDuration timeout, TsurugiFfiSqlQueryResultHandle *query_result_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepared_query_for(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment prepared_statement, MemorySegment parameters, int parameter_size, long timeout, MemorySegment query_result_out) {
        var mh$ = tsurugi_ffi_sql_client_prepared_query_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepared_query_for", context, sql_client, transaction, prepared_statement, parameters, parameter_size, timeout, query_result_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, prepared_statement, parameters, parameter_size, timeout, query_result_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_prepared_query_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_prepared_query_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_prepared_query_async$descriptor() {
        return tsurugi_ffi_sql_client_prepared_query_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_prepared_query_async$handle() {
        return tsurugi_ffi_sql_client_prepared_query_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_prepared_query_async$address() {
        return tsurugi_ffi_sql_client_prepared_query_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_prepared_query_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiSqlPreparedStatementHandle prepared_statement, const TsurugiFfiSqlParameterHandle *parameters, uint32_t parameter_size, TsurugiFfiJobHandle *query_result_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_prepared_query_async(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment prepared_statement, MemorySegment parameters, int parameter_size, MemorySegment query_result_job_out) {
        var mh$ = tsurugi_ffi_sql_client_prepared_query_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_prepared_query_async", context, sql_client, transaction, prepared_statement, parameters, parameter_size, query_result_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, prepared_statement, parameters, parameter_size, query_result_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_commit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_commit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_commit$descriptor() {
        return tsurugi_ffi_sql_client_commit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_commit$handle() {
        return tsurugi_ffi_sql_client_commit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_commit$address() {
        return tsurugi_ffi_sql_client_commit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static int tsurugi_ffi_sql_client_commit(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment commit_option) {
        var mh$ = tsurugi_ffi_sql_client_commit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_commit", context, sql_client, transaction, commit_option);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, commit_option);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_commit_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_commit_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiDuration timeout)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_commit_for$descriptor() {
        return tsurugi_ffi_sql_client_commit_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiDuration timeout)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_commit_for$handle() {
        return tsurugi_ffi_sql_client_commit_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiDuration timeout)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_commit_for$address() {
        return tsurugi_ffi_sql_client_commit_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiDuration timeout)
     * }
     */
    public static int tsurugi_ffi_sql_client_commit_for(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment commit_option, long timeout) {
        var mh$ = tsurugi_ffi_sql_client_commit_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_commit_for", context, sql_client, transaction, commit_option, timeout);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, commit_option, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_commit_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_commit_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiJobHandle *commit_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_commit_async$descriptor() {
        return tsurugi_ffi_sql_client_commit_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiJobHandle *commit_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_commit_async$handle() {
        return tsurugi_ffi_sql_client_commit_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiJobHandle *commit_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_commit_async$address() {
        return tsurugi_ffi_sql_client_commit_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_commit_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiJobHandle *commit_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_commit_async(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment commit_option, MemorySegment commit_job_out) {
        var mh$ = tsurugi_ffi_sql_client_commit_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_commit_async", context, sql_client, transaction, commit_option, commit_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, commit_option, commit_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_rollback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_rollback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_rollback$descriptor() {
        return tsurugi_ffi_sql_client_rollback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_rollback$handle() {
        return tsurugi_ffi_sql_client_rollback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_rollback$address() {
        return tsurugi_ffi_sql_client_rollback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static int tsurugi_ffi_sql_client_rollback(MemorySegment context, MemorySegment sql_client, MemorySegment transaction) {
        var mh$ = tsurugi_ffi_sql_client_rollback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_rollback", context, sql_client, transaction);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_rollback_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_rollback_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_rollback_for$descriptor() {
        return tsurugi_ffi_sql_client_rollback_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_rollback_for$handle() {
        return tsurugi_ffi_sql_client_rollback_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_rollback_for$address() {
        return tsurugi_ffi_sql_client_rollback_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_for(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static int tsurugi_ffi_sql_client_rollback_for(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, long timeout) {
        var mh$ = tsurugi_ffi_sql_client_rollback_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_rollback_for", context, sql_client, transaction, timeout);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_rollback_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_rollback_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiJobHandle *rollback_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_rollback_async$descriptor() {
        return tsurugi_ffi_sql_client_rollback_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiJobHandle *rollback_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_rollback_async$handle() {
        return tsurugi_ffi_sql_client_rollback_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiJobHandle *rollback_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_rollback_async$address() {
        return tsurugi_ffi_sql_client_rollback_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_sql_client_rollback_async(TsurugiFfiContextHandle context, TsurugiFfiSqlClientHandle sql_client, TsurugiFfiTransactionHandle transaction, TsurugiFfiJobHandle *rollback_job_out)
     * }
     */
    public static int tsurugi_ffi_sql_client_rollback_async(MemorySegment context, MemorySegment sql_client, MemorySegment transaction, MemorySegment rollback_job_out) {
        var mh$ = tsurugi_ffi_sql_client_rollback_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_rollback_async", context, sql_client, transaction, rollback_job_out);
            }
            return (int)mh$.invokeExact(context, sql_client, transaction, rollback_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_sql_client_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_sql_client_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_client_dispose(TsurugiFfiSqlClientHandle sql_client)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_sql_client_dispose$descriptor() {
        return tsurugi_ffi_sql_client_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_client_dispose(TsurugiFfiSqlClientHandle sql_client)
     * }
     */
    public static MethodHandle tsurugi_ffi_sql_client_dispose$handle() {
        return tsurugi_ffi_sql_client_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_client_dispose(TsurugiFfiSqlClientHandle sql_client)
     * }
     */
    public static MemorySegment tsurugi_ffi_sql_client_dispose$address() {
        return tsurugi_ffi_sql_client_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_sql_client_dispose(TsurugiFfiSqlClientHandle sql_client)
     * }
     */
    public static void tsurugi_ffi_sql_client_dispose(MemorySegment sql_client) {
        var mh$ = tsurugi_ffi_sql_client_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_sql_client_dispose", sql_client);
            }
            mh$.invokeExact(sql_client);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_table_list_get_table_names_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_table_list_get_table_names_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_size(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t *size_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_table_list_get_table_names_size$descriptor() {
        return tsurugi_ffi_table_list_get_table_names_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_size(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t *size_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_table_list_get_table_names_size$handle() {
        return tsurugi_ffi_table_list_get_table_names_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_size(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t *size_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_table_list_get_table_names_size$address() {
        return tsurugi_ffi_table_list_get_table_names_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_size(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t *size_out)
     * }
     */
    public static int tsurugi_ffi_table_list_get_table_names_size(MemorySegment context, MemorySegment table_list, MemorySegment size_out) {
        var mh$ = tsurugi_ffi_table_list_get_table_names_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_table_list_get_table_names_size", context, table_list, size_out);
            }
            return (int)mh$.invokeExact(context, table_list, size_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_table_list_get_table_names_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_table_list_get_table_names_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_value(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t index, char **table_name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_table_list_get_table_names_value$descriptor() {
        return tsurugi_ffi_table_list_get_table_names_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_value(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t index, char **table_name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_table_list_get_table_names_value$handle() {
        return tsurugi_ffi_table_list_get_table_names_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_value(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t index, char **table_name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_table_list_get_table_names_value$address() {
        return tsurugi_ffi_table_list_get_table_names_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_list_get_table_names_value(TsurugiFfiContextHandle context, TsurugiFfiTableListHandle table_list, uint32_t index, char **table_name_out)
     * }
     */
    public static int tsurugi_ffi_table_list_get_table_names_value(MemorySegment context, MemorySegment table_list, int index, MemorySegment table_name_out) {
        var mh$ = tsurugi_ffi_table_list_get_table_names_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_table_list_get_table_names_value", context, table_list, index, table_name_out);
            }
            return (int)mh$.invokeExact(context, table_list, index, table_name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_table_list_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_table_list_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_table_list_dispose(TsurugiFfiTableListHandle table_list)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_table_list_dispose$descriptor() {
        return tsurugi_ffi_table_list_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_table_list_dispose(TsurugiFfiTableListHandle table_list)
     * }
     */
    public static MethodHandle tsurugi_ffi_table_list_dispose$handle() {
        return tsurugi_ffi_table_list_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_table_list_dispose(TsurugiFfiTableListHandle table_list)
     * }
     */
    public static MemorySegment tsurugi_ffi_table_list_dispose$address() {
        return tsurugi_ffi_table_list_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_table_list_dispose(TsurugiFfiTableListHandle table_list)
     * }
     */
    public static void tsurugi_ffi_table_list_dispose(MemorySegment table_list) {
        var mh$ = tsurugi_ffi_table_list_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_table_list_dispose", table_list);
            }
            mh$.invokeExact(table_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_table_metadata_get_table_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_table_metadata_get_table_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_table_name(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, char **table_name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_table_metadata_get_table_name$descriptor() {
        return tsurugi_ffi_table_metadata_get_table_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_table_name(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, char **table_name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_table_metadata_get_table_name$handle() {
        return tsurugi_ffi_table_metadata_get_table_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_table_name(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, char **table_name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_table_metadata_get_table_name$address() {
        return tsurugi_ffi_table_metadata_get_table_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_table_name(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, char **table_name_out)
     * }
     */
    public static int tsurugi_ffi_table_metadata_get_table_name(MemorySegment context, MemorySegment table_metadata, MemorySegment table_name_out) {
        var mh$ = tsurugi_ffi_table_metadata_get_table_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_table_metadata_get_table_name", context, table_metadata, table_name_out);
            }
            return (int)mh$.invokeExact(context, table_metadata, table_name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_table_metadata_get_columns_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_table_metadata_get_columns_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t *size_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_table_metadata_get_columns_size$descriptor() {
        return tsurugi_ffi_table_metadata_get_columns_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t *size_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_table_metadata_get_columns_size$handle() {
        return tsurugi_ffi_table_metadata_get_columns_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t *size_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_table_metadata_get_columns_size$address() {
        return tsurugi_ffi_table_metadata_get_columns_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_size(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t *size_out)
     * }
     */
    public static int tsurugi_ffi_table_metadata_get_columns_size(MemorySegment context, MemorySegment table_metadata, MemorySegment size_out) {
        var mh$ = tsurugi_ffi_table_metadata_get_columns_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_table_metadata_get_columns_size", context, table_metadata, size_out);
            }
            return (int)mh$.invokeExact(context, table_metadata, size_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_table_metadata_get_columns_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_table_metadata_get_columns_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_table_metadata_get_columns_value$descriptor() {
        return tsurugi_ffi_table_metadata_get_columns_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_table_metadata_get_columns_value$handle() {
        return tsurugi_ffi_table_metadata_get_columns_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_table_metadata_get_columns_value$address() {
        return tsurugi_ffi_table_metadata_get_columns_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_table_metadata_get_columns_value(TsurugiFfiContextHandle context, TsurugiFfiTableMetadataHandle table_metadata, uint32_t index, TsurugiFfiSqlColumnHandle *sql_column_out)
     * }
     */
    public static int tsurugi_ffi_table_metadata_get_columns_value(MemorySegment context, MemorySegment table_metadata, int index, MemorySegment sql_column_out) {
        var mh$ = tsurugi_ffi_table_metadata_get_columns_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_table_metadata_get_columns_value", context, table_metadata, index, sql_column_out);
            }
            return (int)mh$.invokeExact(context, table_metadata, index, sql_column_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_table_metadata_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_table_metadata_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_table_metadata_dispose(TsurugiFfiTableMetadataHandle table_metadata)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_table_metadata_dispose$descriptor() {
        return tsurugi_ffi_table_metadata_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_table_metadata_dispose(TsurugiFfiTableMetadataHandle table_metadata)
     * }
     */
    public static MethodHandle tsurugi_ffi_table_metadata_dispose$handle() {
        return tsurugi_ffi_table_metadata_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_table_metadata_dispose(TsurugiFfiTableMetadataHandle table_metadata)
     * }
     */
    public static MemorySegment tsurugi_ffi_table_metadata_dispose$address() {
        return tsurugi_ffi_table_metadata_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_table_metadata_dispose(TsurugiFfiTableMetadataHandle table_metadata)
     * }
     */
    public static void tsurugi_ffi_table_metadata_dispose(MemorySegment table_metadata) {
        var mh$ = tsurugi_ffi_table_metadata_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_table_metadata_dispose", table_metadata);
            }
            mh$.invokeExact(table_metadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_endpoint_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_endpoint_parse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_endpoint_parse(TsurugiFfiContextHandle context, const char *endpoint, TsurugiFfiEndpointHandle *endpoint_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_endpoint_parse$descriptor() {
        return tsurugi_ffi_endpoint_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_endpoint_parse(TsurugiFfiContextHandle context, const char *endpoint, TsurugiFfiEndpointHandle *endpoint_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_endpoint_parse$handle() {
        return tsurugi_ffi_endpoint_parse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_endpoint_parse(TsurugiFfiContextHandle context, const char *endpoint, TsurugiFfiEndpointHandle *endpoint_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_endpoint_parse$address() {
        return tsurugi_ffi_endpoint_parse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_endpoint_parse(TsurugiFfiContextHandle context, const char *endpoint, TsurugiFfiEndpointHandle *endpoint_out)
     * }
     */
    public static int tsurugi_ffi_endpoint_parse(MemorySegment context, MemorySegment endpoint, MemorySegment endpoint_out) {
        var mh$ = tsurugi_ffi_endpoint_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_endpoint_parse", context, endpoint, endpoint_out);
            }
            return (int)mh$.invokeExact(context, endpoint, endpoint_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_endpoint_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_endpoint_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_endpoint_dispose(TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_endpoint_dispose$descriptor() {
        return tsurugi_ffi_endpoint_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_endpoint_dispose(TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static MethodHandle tsurugi_ffi_endpoint_dispose$handle() {
        return tsurugi_ffi_endpoint_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_endpoint_dispose(TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static MemorySegment tsurugi_ffi_endpoint_dispose$address() {
        return tsurugi_ffi_endpoint_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_endpoint_dispose(TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static void tsurugi_ffi_endpoint_dispose(MemorySegment endpoint) {
        var mh$ = tsurugi_ffi_endpoint_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_endpoint_dispose", endpoint);
            }
            mh$.invokeExact(endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_create(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle *connection_option_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_create$descriptor() {
        return tsurugi_ffi_connection_option_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_create(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle *connection_option_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_create$handle() {
        return tsurugi_ffi_connection_option_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_create(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle *connection_option_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_create$address() {
        return tsurugi_ffi_connection_option_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_create(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle *connection_option_out)
     * }
     */
    public static int tsurugi_ffi_connection_option_create(MemorySegment context, MemorySegment connection_option_out) {
        var mh$ = tsurugi_ffi_connection_option_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_create", context, connection_option_out);
            }
            return (int)mh$.invokeExact(context, connection_option_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_set_endpoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_set_endpoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_set_endpoint$descriptor() {
        return tsurugi_ffi_connection_option_set_endpoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_set_endpoint$handle() {
        return tsurugi_ffi_connection_option_set_endpoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_set_endpoint$address() {
        return tsurugi_ffi_connection_option_set_endpoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiEndpointHandle endpoint)
     * }
     */
    public static int tsurugi_ffi_connection_option_set_endpoint(MemorySegment context, MemorySegment connection_option, MemorySegment endpoint) {
        var mh$ = tsurugi_ffi_connection_option_set_endpoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_set_endpoint", context, connection_option, endpoint);
            }
            return (int)mh$.invokeExact(context, connection_option, endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_set_endpoint_url {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_set_endpoint_url");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint_url(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *endpoint)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_set_endpoint_url$descriptor() {
        return tsurugi_ffi_connection_option_set_endpoint_url.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint_url(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *endpoint)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_set_endpoint_url$handle() {
        return tsurugi_ffi_connection_option_set_endpoint_url.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint_url(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *endpoint)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_set_endpoint_url$address() {
        return tsurugi_ffi_connection_option_set_endpoint_url.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_endpoint_url(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *endpoint)
     * }
     */
    public static int tsurugi_ffi_connection_option_set_endpoint_url(MemorySegment context, MemorySegment connection_option, MemorySegment endpoint) {
        var mh$ = tsurugi_ffi_connection_option_set_endpoint_url.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_set_endpoint_url", context, connection_option, endpoint);
            }
            return (int)mh$.invokeExact(context, connection_option, endpoint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_get_endpoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_get_endpoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **endpoint_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_get_endpoint$descriptor() {
        return tsurugi_ffi_connection_option_get_endpoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **endpoint_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_get_endpoint$handle() {
        return tsurugi_ffi_connection_option_get_endpoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **endpoint_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_get_endpoint$address() {
        return tsurugi_ffi_connection_option_get_endpoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_endpoint(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **endpoint_out)
     * }
     */
    public static int tsurugi_ffi_connection_option_get_endpoint(MemorySegment context, MemorySegment connection_option, MemorySegment endpoint_out) {
        var mh$ = tsurugi_ffi_connection_option_get_endpoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_get_endpoint", context, connection_option, endpoint_out);
            }
            return (int)mh$.invokeExact(context, connection_option, endpoint_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_set_application_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_set_application_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *application_name)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_set_application_name$descriptor() {
        return tsurugi_ffi_connection_option_set_application_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *application_name)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_set_application_name$handle() {
        return tsurugi_ffi_connection_option_set_application_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *application_name)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_set_application_name$address() {
        return tsurugi_ffi_connection_option_set_application_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *application_name)
     * }
     */
    public static int tsurugi_ffi_connection_option_set_application_name(MemorySegment context, MemorySegment connection_option, MemorySegment application_name) {
        var mh$ = tsurugi_ffi_connection_option_set_application_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_set_application_name", context, connection_option, application_name);
            }
            return (int)mh$.invokeExact(context, connection_option, application_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_get_application_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_get_application_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **application_name_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_get_application_name$descriptor() {
        return tsurugi_ffi_connection_option_get_application_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **application_name_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_get_application_name$handle() {
        return tsurugi_ffi_connection_option_get_application_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **application_name_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_get_application_name$address() {
        return tsurugi_ffi_connection_option_get_application_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_application_name(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **application_name_out)
     * }
     */
    public static int tsurugi_ffi_connection_option_get_application_name(MemorySegment context, MemorySegment connection_option, MemorySegment application_name_out) {
        var mh$ = tsurugi_ffi_connection_option_get_application_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_get_application_name", context, connection_option, application_name_out);
            }
            return (int)mh$.invokeExact(context, connection_option, application_name_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_set_session_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_set_session_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *label)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_set_session_label$descriptor() {
        return tsurugi_ffi_connection_option_set_session_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *label)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_set_session_label$handle() {
        return tsurugi_ffi_connection_option_set_session_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *label)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_set_session_label$address() {
        return tsurugi_ffi_connection_option_set_session_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_set_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, const char *label)
     * }
     */
    public static int tsurugi_ffi_connection_option_set_session_label(MemorySegment context, MemorySegment connection_option, MemorySegment label) {
        var mh$ = tsurugi_ffi_connection_option_set_session_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_set_session_label", context, connection_option, label);
            }
            return (int)mh$.invokeExact(context, connection_option, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_get_session_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_get_session_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **label_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_get_session_label$descriptor() {
        return tsurugi_ffi_connection_option_get_session_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **label_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_get_session_label$handle() {
        return tsurugi_ffi_connection_option_get_session_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **label_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_get_session_label$address() {
        return tsurugi_ffi_connection_option_get_session_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_connection_option_get_session_label(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, char **label_out)
     * }
     */
    public static int tsurugi_ffi_connection_option_get_session_label(MemorySegment context, MemorySegment connection_option, MemorySegment label_out) {
        var mh$ = tsurugi_ffi_connection_option_get_session_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_get_session_label", context, connection_option, label_out);
            }
            return (int)mh$.invokeExact(context, connection_option, label_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_connection_option_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_connection_option_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_connection_option_dispose(TsurugiFfiConnectionOptionHandle connection_option)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_connection_option_dispose$descriptor() {
        return tsurugi_ffi_connection_option_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_connection_option_dispose(TsurugiFfiConnectionOptionHandle connection_option)
     * }
     */
    public static MethodHandle tsurugi_ffi_connection_option_dispose$handle() {
        return tsurugi_ffi_connection_option_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_connection_option_dispose(TsurugiFfiConnectionOptionHandle connection_option)
     * }
     */
    public static MemorySegment tsurugi_ffi_connection_option_dispose$address() {
        return tsurugi_ffi_connection_option_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_connection_option_dispose(TsurugiFfiConnectionOptionHandle connection_option)
     * }
     */
    public static void tsurugi_ffi_connection_option_dispose(MemorySegment connection_option) {
        var mh$ = tsurugi_ffi_connection_option_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_connection_option_dispose", connection_option);
            }
            mh$.invokeExact(connection_option);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_session_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_session_connect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_session_connect$descriptor() {
        return tsurugi_ffi_session_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_session_connect$handle() {
        return tsurugi_ffi_session_connect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_session_connect$address() {
        return tsurugi_ffi_session_connect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static int tsurugi_ffi_session_connect(MemorySegment context, MemorySegment connection_option, MemorySegment session_out) {
        var mh$ = tsurugi_ffi_session_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_session_connect", context, connection_option, session_out);
            }
            return (int)mh$.invokeExact(context, connection_option, session_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_session_connect_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_session_connect_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_for(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiDuration timeout, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_session_connect_for$descriptor() {
        return tsurugi_ffi_session_connect_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_for(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiDuration timeout, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_session_connect_for$handle() {
        return tsurugi_ffi_session_connect_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_for(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiDuration timeout, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_session_connect_for$address() {
        return tsurugi_ffi_session_connect_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_for(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiDuration timeout, TsurugiFfiSessionHandle *session_out)
     * }
     */
    public static int tsurugi_ffi_session_connect_for(MemorySegment context, MemorySegment connection_option, long timeout, MemorySegment session_out) {
        var mh$ = tsurugi_ffi_session_connect_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_session_connect_for", context, connection_option, timeout, session_out);
            }
            return (int)mh$.invokeExact(context, connection_option, timeout, session_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_session_connect_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_session_connect_async");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_async(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiJobHandle *session_job_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_session_connect_async$descriptor() {
        return tsurugi_ffi_session_connect_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_async(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiJobHandle *session_job_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_session_connect_async$handle() {
        return tsurugi_ffi_session_connect_async.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_async(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiJobHandle *session_job_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_session_connect_async$address() {
        return tsurugi_ffi_session_connect_async.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_connect_async(TsurugiFfiContextHandle context, TsurugiFfiConnectionOptionHandle connection_option, TsurugiFfiJobHandle *session_job_out)
     * }
     */
    public static int tsurugi_ffi_session_connect_async(MemorySegment context, MemorySegment connection_option, MemorySegment session_job_out) {
        var mh$ = tsurugi_ffi_session_connect_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_session_connect_async", context, connection_option, session_job_out);
            }
            return (int)mh$.invokeExact(context, connection_option, session_job_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_session_make_sql_client {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_session_make_sql_client");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_make_sql_client(TsurugiFfiContextHandle context, TsurugiFfiSessionHandle session, TsurugiFfiSqlClientHandle *sql_client_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_session_make_sql_client$descriptor() {
        return tsurugi_ffi_session_make_sql_client.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_make_sql_client(TsurugiFfiContextHandle context, TsurugiFfiSessionHandle session, TsurugiFfiSqlClientHandle *sql_client_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_session_make_sql_client$handle() {
        return tsurugi_ffi_session_make_sql_client.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_make_sql_client(TsurugiFfiContextHandle context, TsurugiFfiSessionHandle session, TsurugiFfiSqlClientHandle *sql_client_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_session_make_sql_client$address() {
        return tsurugi_ffi_session_make_sql_client.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_session_make_sql_client(TsurugiFfiContextHandle context, TsurugiFfiSessionHandle session, TsurugiFfiSqlClientHandle *sql_client_out)
     * }
     */
    public static int tsurugi_ffi_session_make_sql_client(MemorySegment context, MemorySegment session, MemorySegment sql_client_out) {
        var mh$ = tsurugi_ffi_session_make_sql_client.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_session_make_sql_client", context, session, sql_client_out);
            }
            return (int)mh$.invokeExact(context, session, sql_client_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_session_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_session_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_session_dispose(TsurugiFfiSessionHandle session)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_session_dispose$descriptor() {
        return tsurugi_ffi_session_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_session_dispose(TsurugiFfiSessionHandle session)
     * }
     */
    public static MethodHandle tsurugi_ffi_session_dispose$handle() {
        return tsurugi_ffi_session_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_session_dispose(TsurugiFfiSessionHandle session)
     * }
     */
    public static MemorySegment tsurugi_ffi_session_dispose$address() {
        return tsurugi_ffi_session_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_session_dispose(TsurugiFfiSessionHandle session)
     * }
     */
    public static void tsurugi_ffi_session_dispose(MemorySegment session) {
        var mh$ = tsurugi_ffi_session_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_session_dispose", session);
            }
            mh$.invokeExact(session);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_commit_option_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_commit_option_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_create(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle *commit_option_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_commit_option_create$descriptor() {
        return tsurugi_ffi_commit_option_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_create(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle *commit_option_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_commit_option_create$handle() {
        return tsurugi_ffi_commit_option_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_create(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle *commit_option_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_commit_option_create$address() {
        return tsurugi_ffi_commit_option_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_create(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle *commit_option_out)
     * }
     */
    public static int tsurugi_ffi_commit_option_create(MemorySegment context, MemorySegment commit_option_out) {
        var mh$ = tsurugi_ffi_commit_option_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_commit_option_create", context, commit_option_out);
            }
            return (int)mh$.invokeExact(context, commit_option_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_commit_option_set_commit_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_commit_option_set_commit_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_set_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType commit_type)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_commit_option_set_commit_type$descriptor() {
        return tsurugi_ffi_commit_option_set_commit_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_set_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType commit_type)
     * }
     */
    public static MethodHandle tsurugi_ffi_commit_option_set_commit_type$handle() {
        return tsurugi_ffi_commit_option_set_commit_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_set_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType commit_type)
     * }
     */
    public static MemorySegment tsurugi_ffi_commit_option_set_commit_type$address() {
        return tsurugi_ffi_commit_option_set_commit_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_set_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType commit_type)
     * }
     */
    public static int tsurugi_ffi_commit_option_set_commit_type(MemorySegment context, MemorySegment commit_option, int commit_type) {
        var mh$ = tsurugi_ffi_commit_option_set_commit_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_commit_option_set_commit_type", context, commit_option, commit_type);
            }
            return (int)mh$.invokeExact(context, commit_option, commit_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_commit_option_get_commit_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_commit_option_get_commit_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_get_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType *commit_type_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_commit_option_get_commit_type$descriptor() {
        return tsurugi_ffi_commit_option_get_commit_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_get_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType *commit_type_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_commit_option_get_commit_type$handle() {
        return tsurugi_ffi_commit_option_get_commit_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_get_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType *commit_type_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_commit_option_get_commit_type$address() {
        return tsurugi_ffi_commit_option_get_commit_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_commit_option_get_commit_type(TsurugiFfiContextHandle context, TsurugiFfiCommitOptionHandle commit_option, TsurugiFfiCommitType *commit_type_out)
     * }
     */
    public static int tsurugi_ffi_commit_option_get_commit_type(MemorySegment context, MemorySegment commit_option, MemorySegment commit_type_out) {
        var mh$ = tsurugi_ffi_commit_option_get_commit_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_commit_option_get_commit_type", context, commit_option, commit_type_out);
            }
            return (int)mh$.invokeExact(context, commit_option, commit_type_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_commit_option_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_commit_option_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_commit_option_dispose(TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_commit_option_dispose$descriptor() {
        return tsurugi_ffi_commit_option_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_commit_option_dispose(TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static MethodHandle tsurugi_ffi_commit_option_dispose$handle() {
        return tsurugi_ffi_commit_option_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_commit_option_dispose(TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static MemorySegment tsurugi_ffi_commit_option_dispose$address() {
        return tsurugi_ffi_commit_option_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_commit_option_dispose(TsurugiFfiCommitOptionHandle commit_option)
     * }
     */
    public static void tsurugi_ffi_commit_option_dispose(MemorySegment commit_option) {
        var mh$ = tsurugi_ffi_commit_option_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_commit_option_dispose", commit_option);
            }
            mh$.invokeExact(commit_option);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_option_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_option_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_create(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle *transaction_option_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_option_create$descriptor() {
        return tsurugi_ffi_transaction_option_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_create(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle *transaction_option_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_option_create$handle() {
        return tsurugi_ffi_transaction_option_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_create(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle *transaction_option_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_option_create$address() {
        return tsurugi_ffi_transaction_option_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_create(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle *transaction_option_out)
     * }
     */
    public static int tsurugi_ffi_transaction_option_create(MemorySegment context, MemorySegment transaction_option_out) {
        var mh$ = tsurugi_ffi_transaction_option_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_option_create", context, transaction_option_out);
            }
            return (int)mh$.invokeExact(context, transaction_option_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_option_set_transaction_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_option_set_transaction_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType transaction_type)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_option_set_transaction_type$descriptor() {
        return tsurugi_ffi_transaction_option_set_transaction_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType transaction_type)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_option_set_transaction_type$handle() {
        return tsurugi_ffi_transaction_option_set_transaction_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType transaction_type)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_option_set_transaction_type$address() {
        return tsurugi_ffi_transaction_option_set_transaction_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType transaction_type)
     * }
     */
    public static int tsurugi_ffi_transaction_option_set_transaction_type(MemorySegment context, MemorySegment transaction_option, int transaction_type) {
        var mh$ = tsurugi_ffi_transaction_option_set_transaction_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_option_set_transaction_type", context, transaction_option, transaction_type);
            }
            return (int)mh$.invokeExact(context, transaction_option, transaction_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_option_get_transaction_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_option_get_transaction_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType *transaction_type_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_option_get_transaction_type$descriptor() {
        return tsurugi_ffi_transaction_option_get_transaction_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType *transaction_type_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_option_get_transaction_type$handle() {
        return tsurugi_ffi_transaction_option_get_transaction_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType *transaction_type_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_option_get_transaction_type$address() {
        return tsurugi_ffi_transaction_option_get_transaction_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_type(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, TsurugiFfiTransactionType *transaction_type_out)
     * }
     */
    public static int tsurugi_ffi_transaction_option_get_transaction_type(MemorySegment context, MemorySegment transaction_option, MemorySegment transaction_type_out) {
        var mh$ = tsurugi_ffi_transaction_option_get_transaction_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_option_get_transaction_type", context, transaction_option, transaction_type_out);
            }
            return (int)mh$.invokeExact(context, transaction_option, transaction_type_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_option_set_transaction_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_option_set_transaction_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, const char *label)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_option_set_transaction_label$descriptor() {
        return tsurugi_ffi_transaction_option_set_transaction_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, const char *label)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_option_set_transaction_label$handle() {
        return tsurugi_ffi_transaction_option_set_transaction_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, const char *label)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_option_set_transaction_label$address() {
        return tsurugi_ffi_transaction_option_set_transaction_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_set_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, const char *label)
     * }
     */
    public static int tsurugi_ffi_transaction_option_set_transaction_label(MemorySegment context, MemorySegment transaction_option, MemorySegment label) {
        var mh$ = tsurugi_ffi_transaction_option_set_transaction_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_option_set_transaction_label", context, transaction_option, label);
            }
            return (int)mh$.invokeExact(context, transaction_option, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_option_get_transaction_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_option_get_transaction_label");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, char **label_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_option_get_transaction_label$descriptor() {
        return tsurugi_ffi_transaction_option_get_transaction_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, char **label_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_option_get_transaction_label$handle() {
        return tsurugi_ffi_transaction_option_get_transaction_label.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, char **label_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_option_get_transaction_label$address() {
        return tsurugi_ffi_transaction_option_get_transaction_label.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_option_get_transaction_label(TsurugiFfiContextHandle context, TsurugiFfiTransactionOptionHandle transaction_option, char **label_out)
     * }
     */
    public static int tsurugi_ffi_transaction_option_get_transaction_label(MemorySegment context, MemorySegment transaction_option, MemorySegment label_out) {
        var mh$ = tsurugi_ffi_transaction_option_get_transaction_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_option_get_transaction_label", context, transaction_option, label_out);
            }
            return (int)mh$.invokeExact(context, transaction_option, label_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_option_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_option_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_option_dispose(TsurugiFfiTransactionOptionHandle transaction_option)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_option_dispose$descriptor() {
        return tsurugi_ffi_transaction_option_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_option_dispose(TsurugiFfiTransactionOptionHandle transaction_option)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_option_dispose$handle() {
        return tsurugi_ffi_transaction_option_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_option_dispose(TsurugiFfiTransactionOptionHandle transaction_option)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_option_dispose$address() {
        return tsurugi_ffi_transaction_option_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_option_dispose(TsurugiFfiTransactionOptionHandle transaction_option)
     * }
     */
    public static void tsurugi_ffi_transaction_option_dispose(MemorySegment transaction_option) {
        var mh$ = tsurugi_ffi_transaction_option_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_option_dispose", transaction_option);
            }
            mh$.invokeExact(transaction_option);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_get_transaction_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_get_transaction_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_get_transaction_id(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, char **transaction_id_out)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_get_transaction_id$descriptor() {
        return tsurugi_ffi_transaction_get_transaction_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_get_transaction_id(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, char **transaction_id_out)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_get_transaction_id$handle() {
        return tsurugi_ffi_transaction_get_transaction_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_get_transaction_id(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, char **transaction_id_out)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_get_transaction_id$address() {
        return tsurugi_ffi_transaction_get_transaction_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_get_transaction_id(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, char **transaction_id_out)
     * }
     */
    public static int tsurugi_ffi_transaction_get_transaction_id(MemorySegment context, MemorySegment transaction, MemorySegment transaction_id_out) {
        var mh$ = tsurugi_ffi_transaction_get_transaction_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_get_transaction_id", context, transaction, transaction_id_out);
            }
            return (int)mh$.invokeExact(context, transaction, transaction_id_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_close");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_close$descriptor() {
        return tsurugi_ffi_transaction_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_close$handle() {
        return tsurugi_ffi_transaction_close.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_close$address() {
        return tsurugi_ffi_transaction_close.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static int tsurugi_ffi_transaction_close(MemorySegment context, MemorySegment transaction) {
        var mh$ = tsurugi_ffi_transaction_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_close", context, transaction);
            }
            return (int)mh$.invokeExact(context, transaction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_close_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            tsubakuro_rust_ffi_h.C_INT,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_POINTER,
            tsubakuro_rust_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_close_for");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close_for(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_close_for$descriptor() {
        return tsurugi_ffi_transaction_close_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close_for(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_close_for$handle() {
        return tsurugi_ffi_transaction_close_for.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close_for(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_close_for$address() {
        return tsurugi_ffi_transaction_close_for.ADDR;
    }

    /**
     * {@snippet lang=c :
     * TsurugiFfiRc tsurugi_ffi_transaction_close_for(TsurugiFfiContextHandle context, TsurugiFfiTransactionHandle transaction, TsurugiFfiDuration timeout)
     * }
     */
    public static int tsurugi_ffi_transaction_close_for(MemorySegment context, MemorySegment transaction, long timeout) {
        var mh$ = tsurugi_ffi_transaction_close_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_close_for", context, transaction, timeout);
            }
            return (int)mh$.invokeExact(context, transaction, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tsurugi_ffi_transaction_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            tsubakuro_rust_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = tsubakuro_rust_ffi_h.findOrThrow("tsurugi_ffi_transaction_dispose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_dispose(TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static FunctionDescriptor tsurugi_ffi_transaction_dispose$descriptor() {
        return tsurugi_ffi_transaction_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_dispose(TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static MethodHandle tsurugi_ffi_transaction_dispose$handle() {
        return tsurugi_ffi_transaction_dispose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_dispose(TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static MemorySegment tsurugi_ffi_transaction_dispose$address() {
        return tsurugi_ffi_transaction_dispose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void tsurugi_ffi_transaction_dispose(TsurugiFfiTransactionHandle transaction)
     * }
     */
    public static void tsurugi_ffi_transaction_dispose(MemorySegment transaction) {
        var mh$ = tsurugi_ffi_transaction_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tsurugi_ffi_transaction_dispose", transaction);
            }
            mh$.invokeExact(transaction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int _VCRUNTIME_DISABLED_WARNINGS = (int)4514L;
    /**
     * {@snippet lang=c :
     * #define _VCRUNTIME_DISABLED_WARNINGS 4514
     * }
     */
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return _VCRUNTIME_DISABLED_WARNINGS;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final byte INT8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static byte INT8_MAX() {
        return INT8_MAX;
    }
    private static final short INT16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static short INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final byte UINT8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static byte UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final short UINT16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static short UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final byte INT_LEAST8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static byte INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final short INT_LEAST16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static short INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final byte UINT_LEAST8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static byte UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final short UINT_LEAST16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static short UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -2147483648
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final byte INT_FAST8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static byte INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 2147483647
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final byte UINT_FAST8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static byte UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 4294967295
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int _UCRT_DISABLED_WARNINGS = (int)4324L;
    /**
     * {@snippet lang=c :
     * #define _UCRT_DISABLED_WARNINGS 4324
     * }
     */
    public static int _UCRT_DISABLED_WARNINGS() {
        return _UCRT_DISABLED_WARNINGS;
    }
    private static final long _TRUNCATE = -1L;
    /**
     * {@snippet lang=c :
     * #define _TRUNCATE -1
     * }
     */
    public static long _TRUNCATE() {
        return _TRUNCATE;
    }
    private static final long _CRT_SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define _CRT_SIZE_MAX -1
     * }
     */
    public static long _CRT_SIZE_MAX() {
        return _CRT_SIZE_MAX;
    }
    /**
     * {@snippet lang=c :
     * #define __FILEW__ "D"
     * }
     */
    public static MemorySegment __FILEW__() {
        class Holder {
            static final MemorySegment __FILEW__
                = tsubakuro_rust_ffi_h.LIBRARY_ARENA.allocateFrom("D");
        }
        return Holder.__FILEW__;
    }
    private static final int __STDC_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __STDC_SECURE_LIB__ 200411
     * }
     */
    public static int __STDC_SECURE_LIB__() {
        return __STDC_SECURE_LIB__;
    }
    private static final int __GOT_SECURE_LIB__ = (int)200411L;
    /**
     * {@snippet lang=c :
     * #define __GOT_SECURE_LIB__ 200411
     * }
     */
    public static int __GOT_SECURE_LIB__() {
        return __GOT_SECURE_LIB__;
    }
    private static final int _MAX_ITOSTR_BASE16_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_ITOSTR_BASE16_COUNT() {
        return _MAX_ITOSTR_BASE16_COUNT;
    }
    private static final int _MAX_ITOSTR_BASE10_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE10_COUNT 12
     * }
     */
    public static int _MAX_ITOSTR_BASE10_COUNT() {
        return _MAX_ITOSTR_BASE10_COUNT;
    }
    private static final int _MAX_ITOSTR_BASE8_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_ITOSTR_BASE8_COUNT() {
        return _MAX_ITOSTR_BASE8_COUNT;
    }
    private static final int _MAX_ITOSTR_BASE2_COUNT = (int)33L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ITOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_ITOSTR_BASE2_COUNT() {
        return _MAX_ITOSTR_BASE2_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE16_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_LTOSTR_BASE16_COUNT() {
        return _MAX_LTOSTR_BASE16_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE10_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE10_COUNT 12
     * }
     */
    public static int _MAX_LTOSTR_BASE10_COUNT() {
        return _MAX_LTOSTR_BASE10_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE8_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_LTOSTR_BASE8_COUNT() {
        return _MAX_LTOSTR_BASE8_COUNT;
    }
    private static final int _MAX_LTOSTR_BASE2_COUNT = (int)33L;
    /**
     * {@snippet lang=c :
     * #define _MAX_LTOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_LTOSTR_BASE2_COUNT() {
        return _MAX_LTOSTR_BASE2_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE16_COUNT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE16_COUNT 9
     * }
     */
    public static int _MAX_ULTOSTR_BASE16_COUNT() {
        return _MAX_ULTOSTR_BASE16_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE10_COUNT = (int)11L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE10_COUNT 11
     * }
     */
    public static int _MAX_ULTOSTR_BASE10_COUNT() {
        return _MAX_ULTOSTR_BASE10_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE8_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE8_COUNT 12
     * }
     */
    public static int _MAX_ULTOSTR_BASE8_COUNT() {
        return _MAX_ULTOSTR_BASE8_COUNT;
    }
    private static final int _MAX_ULTOSTR_BASE2_COUNT = (int)33L;
    /**
     * {@snippet lang=c :
     * #define _MAX_ULTOSTR_BASE2_COUNT 33
     * }
     */
    public static int _MAX_ULTOSTR_BASE2_COUNT() {
        return _MAX_ULTOSTR_BASE2_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE16_COUNT = (int)17L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE16_COUNT 17
     * }
     */
    public static int _MAX_I64TOSTR_BASE16_COUNT() {
        return _MAX_I64TOSTR_BASE16_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE10_COUNT = (int)21L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE10_COUNT 21
     * }
     */
    public static int _MAX_I64TOSTR_BASE10_COUNT() {
        return _MAX_I64TOSTR_BASE10_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE8_COUNT = (int)23L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE8_COUNT 23
     * }
     */
    public static int _MAX_I64TOSTR_BASE8_COUNT() {
        return _MAX_I64TOSTR_BASE8_COUNT;
    }
    private static final int _MAX_I64TOSTR_BASE2_COUNT = (int)65L;
    /**
     * {@snippet lang=c :
     * #define _MAX_I64TOSTR_BASE2_COUNT 65
     * }
     */
    public static int _MAX_I64TOSTR_BASE2_COUNT() {
        return _MAX_I64TOSTR_BASE2_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE16_COUNT = (int)17L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE16_COUNT 17
     * }
     */
    public static int _MAX_U64TOSTR_BASE16_COUNT() {
        return _MAX_U64TOSTR_BASE16_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE10_COUNT = (int)21L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE10_COUNT 21
     * }
     */
    public static int _MAX_U64TOSTR_BASE10_COUNT() {
        return _MAX_U64TOSTR_BASE10_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE8_COUNT = (int)23L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE8_COUNT 23
     * }
     */
    public static int _MAX_U64TOSTR_BASE8_COUNT() {
        return _MAX_U64TOSTR_BASE8_COUNT;
    }
    private static final int _MAX_U64TOSTR_BASE2_COUNT = (int)65L;
    /**
     * {@snippet lang=c :
     * #define _MAX_U64TOSTR_BASE2_COUNT 65
     * }
     */
    public static int _MAX_U64TOSTR_BASE2_COUNT() {
        return _MAX_U64TOSTR_BASE2_COUNT;
    }
    private static final int SCHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return SCHAR_MIN;
    }
    private static final int CHAR_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return CHAR_MIN;
    }
    private static final int CHAR_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return CHAR_MAX;
    }
    private static final int SHRT_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return SHRT_MIN;
    }
    private static final int INT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return INT_MIN;
    }
    private static final int UINT_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return UINT_MAX;
    }
    private static final int LONG_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define LONG_MIN -2147483648
     * }
     */
    public static int LONG_MIN() {
        return LONG_MIN;
    }
    private static final int LONG_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define LONG_MAX 2147483647
     * }
     */
    public static int LONG_MAX() {
        return LONG_MAX;
    }
    private static final int ULONG_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define ULONG_MAX 4294967295
     * }
     */
    public static int ULONG_MAX() {
        return ULONG_MAX;
    }
    private static final long LLONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return LLONG_MAX;
    }
    private static final long LLONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return LLONG_MIN;
    }
    private static final long ULLONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return ULLONG_MAX;
    }
    private static final int _I8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define _I8_MIN -128
     * }
     */
    public static int _I8_MIN() {
        return _I8_MIN;
    }
    private static final byte _I8_MAX = (byte)127L;
    /**
     * {@snippet lang=c :
     * #define _I8_MAX 127
     * }
     */
    public static byte _I8_MAX() {
        return _I8_MAX;
    }
    private static final byte _UI8_MAX = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define _UI8_MAX 255
     * }
     */
    public static byte _UI8_MAX() {
        return _UI8_MAX;
    }
    private static final int _I16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define _I16_MIN -32768
     * }
     */
    public static int _I16_MIN() {
        return _I16_MIN;
    }
    private static final short _I16_MAX = (short)32767L;
    /**
     * {@snippet lang=c :
     * #define _I16_MAX 32767
     * }
     */
    public static short _I16_MAX() {
        return _I16_MAX;
    }
    private static final short _UI16_MAX = (short)65535L;
    /**
     * {@snippet lang=c :
     * #define _UI16_MAX 65535
     * }
     */
    public static short _UI16_MAX() {
        return _UI16_MAX;
    }
    private static final int _I32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define _I32_MIN -2147483648
     * }
     */
    public static int _I32_MIN() {
        return _I32_MIN;
    }
    private static final int _I32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define _I32_MAX 2147483647
     * }
     */
    public static int _I32_MAX() {
        return _I32_MAX;
    }
    private static final int _UI32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define _UI32_MAX 4294967295
     * }
     */
    public static int _UI32_MAX() {
        return _UI32_MAX;
    }
    private static final long _I64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define _I64_MIN -9223372036854775808
     * }
     */
    public static long _I64_MIN() {
        return _I64_MIN;
    }
    private static final long _I64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define _I64_MAX 9223372036854775807
     * }
     */
    public static long _I64_MAX() {
        return _I64_MAX;
    }
    private static final long _UI64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define _UI64_MAX -1
     * }
     */
    public static long _UI64_MAX() {
        return _UI64_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final long LONG_LONG_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_LONG_MAX() {
        return LONG_LONG_MAX;
    }
    private static final long LONG_LONG_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define LONG_LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_LONG_MIN() {
        return LONG_LONG_MIN;
    }
    private static final long ULONG_LONG_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define ULONG_LONG_MAX -1
     * }
     */
    public static long ULONG_LONG_MAX() {
        return ULONG_LONG_MAX;
    }
    private static final int _CVTBUFSIZE = (int)349L;
    /**
     * {@snippet lang=c :
     * #define _CVTBUFSIZE 349
     * }
     */
    public static int _CVTBUFSIZE() {
        return _CVTBUFSIZE;
    }
    private static final int TSURUGI_FFI_RC_FFI_BASE = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_BASE 1073741824
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_BASE() {
        return TSURUGI_FFI_RC_FFI_BASE;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG_ERROR = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG_ERROR 1073741824
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_JOB_ERROR = (int)1090519040L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_JOB_ERROR 1090519040
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_JOB_ERROR() {
        return TSURUGI_FFI_RC_FFI_JOB_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ERROR = (int)1107296256L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ERROR 1107296256
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ERROR() {
        return TSURUGI_FFI_RC_FFI_ERROR;
    }
    private static final int TSURUGI_FFI_RC_CORE_CLIENT_ERROR = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_CORE_CLIENT_ERROR -2147483648
     * }
     */
    public static int TSURUGI_FFI_RC_CORE_CLIENT_ERROR() {
        return TSURUGI_FFI_RC_CORE_CLIENT_ERROR;
    }
    private static final int TSURUGI_FFI_RC_CORE_SERVER_ERROR = (int)-1073741824L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_CORE_SERVER_ERROR -1073741824
     * }
     */
    public static int TSURUGI_FFI_RC_CORE_SERVER_ERROR() {
        return TSURUGI_FFI_RC_CORE_SERVER_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG0_ERROR = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG0_ERROR 1073741824
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG0_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG0_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG1_ERROR = (int)1073741825L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG1_ERROR 1073741825
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG1_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG1_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG2_ERROR = (int)1073741826L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG2_ERROR 1073741826
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG2_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG2_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG3_ERROR = (int)1073741827L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG3_ERROR 1073741827
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG3_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG3_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG4_ERROR = (int)1073741828L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG4_ERROR 1073741828
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG4_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG4_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG5_ERROR = (int)1073741829L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG5_ERROR 1073741829
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG5_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG5_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG6_ERROR = (int)1073741830L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG6_ERROR 1073741830
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG6_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG6_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_ARG7_ERROR = (int)1073741831L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_ARG7_ERROR 1073741831
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_ARG7_ERROR() {
        return TSURUGI_FFI_RC_FFI_ARG7_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_JOB_ALREADY_CLOSED = (int)1090519041L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_JOB_ALREADY_CLOSED 1090519041
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_JOB_ALREADY_CLOSED() {
        return TSURUGI_FFI_RC_FFI_JOB_ALREADY_CLOSED;
    }
    private static final int TSURUGI_FFI_RC_FFI_NUL_ERROR = (int)1107296257L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_NUL_ERROR 1107296257
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_NUL_ERROR() {
        return TSURUGI_FFI_RC_FFI_NUL_ERROR;
    }
    private static final int TSURUGI_FFI_RC_FFI_DIAGNOSTIC_CODE_NOT_FOUND = (int)1107296258L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_FFI_DIAGNOSTIC_CODE_NOT_FOUND 1107296258
     * }
     */
    public static int TSURUGI_FFI_RC_FFI_DIAGNOSTIC_CODE_NOT_FOUND() {
        return TSURUGI_FFI_RC_FFI_DIAGNOSTIC_CODE_NOT_FOUND;
    }
    private static final int TSURUGI_FFI_RC_CORE_CLIENT_CLIENT_ERROR = (int)-2147418112L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_CORE_CLIENT_CLIENT_ERROR -2147418112
     * }
     */
    public static int TSURUGI_FFI_RC_CORE_CLIENT_CLIENT_ERROR() {
        return TSURUGI_FFI_RC_CORE_CLIENT_CLIENT_ERROR;
    }
    private static final int TSURUGI_FFI_RC_CORE_CLIENT_TIMEOUT_ERROR = (int)-2147352576L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_CORE_CLIENT_TIMEOUT_ERROR -2147352576
     * }
     */
    public static int TSURUGI_FFI_RC_CORE_CLIENT_TIMEOUT_ERROR() {
        return TSURUGI_FFI_RC_CORE_CLIENT_TIMEOUT_ERROR;
    }
    private static final int TSURUGI_FFI_RC_CORE_CLIENT_IO_ERROR = (int)-2147287040L;
    /**
     * {@snippet lang=c :
     * #define TSURUGI_FFI_RC_CORE_CLIENT_IO_ERROR -2147287040
     * }
     */
    public static int TSURUGI_FFI_RC_CORE_CLIENT_IO_ERROR() {
        return TSURUGI_FFI_RC_CORE_CLIENT_IO_ERROR;
    }
}

