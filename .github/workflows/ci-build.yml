name: Tsubakuro-Rust-CI

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      tsurugi_version:
        type: string
        default: 'snapshot'
      os:
        type: string
        default: 'ubuntu-22.04'
      tsurugi_loglevel:
        type: number
        default: 30

jobs:
  Build:
    runs-on: ${{ inputs.os || 'ubuntu-22.04' }}
    permissions:
      checks: write
      contents: write
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    env:
      DBTEST_ENDPOINT      : tcp://localhost:12345
      DBTEST_ENDPOINT_JAVA : tcp://localhost:12345
      GLOG_v               : ${{ inputs.tsurugi_loglevel || 30 }}

    services:
      tsurugi:
        image: ghcr.io/project-tsurugi/tsurugidb:${{ inputs.tsurugi_version || 'snapshot' }}-${{ inputs.os || 'ubuntu-22.04' }}
        ports:
          - 12345:12345
        env:
          GLOG_v: ${{ inputs.tsurugi_loglevel || 30 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apt_Install
        run: |
          if command -v apt-get > /dev/null; then
            sudo apt-get update -y
            sudo apt-get install -y protobuf-compiler
          fi

      - name: Test_Core
        run: |
          cd tsubakuro-rust-core
          cargo build
          cargo test

      - name: Test_DBTest
        run: |
          cd tsubakuro-rust-dbtest
          cargo run ${DBTEST_ENDPOINT} tsurugi password
          cargo test "" -- --test-threads=1 endpoint=${DBTEST_ENDPOINT}

      - name: Build_FFI
        run: |
          cd tsubakuro-rust-ffi
          cargo build --release

      - name: Test_Java
        run: |
          cd tsubakuro-rust-java
          ./gradlew test -Pffi.library.path=${GITHUB_WORKSPACE}/tsubakuro-rust-ffi/target/release/libtsubakuro_rust_ffi.so -Pdbtest.endpoint=${DBTEST_ENDPOINT} -Pdbtest.endpoint.java=${DBTEST_ENDPOINT_JAVA}

      - name: Lint_Core
        run: |
          cd tsubakuro-rust-core
          cargo clippy

      - name: Lint_FFI
        run: |
          cd tsubakuro-rust-ffi
          cargo clippy

      - name: Publish_Core
        if: github.repository_owner == 'project-tsurugi' && contains(github.ref, '/tags/')
        run: |
          cd tsubakuro-rust-core
          cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO }}

      - name: Create_GitHub_Release
        if: github.repository_owner == 'project-tsurugi' && contains(github.ref, '/tags/')
        run: |
          gh release create ${TSUBAKURO_RUST_VERSION} --title ${TSUBAKURO_RUST_VERSION} --latest --repo project-tsurugi/tsubakuro-rust
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TSUBAKURO_RUST_VERSION: ${{ github.ref_name }}

  Build_Windows:
    runs-on: windows-2022
    permissions:
      checks: write
      contents: write
    timeout-minutes: 30
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install_Protobuf
        run: |
          choco install protoc -y

      - name: Test_Core
        run: |
          cd tsubakuro-rust-core
          cargo build
          cargo test

      - name: Test_ODBC
        run: |
          cd tsubakuro-rust-odbc
          cargo build --release
          ls -l target/release/

          cargo test

      - name: Build_Installer
        run: |
          cd tsubakuro-rust-odbc/installer
          ISCC.exe installer.iss

          ls -l Output/

      - name: Lint_ODBC
        continue-on-error: true
        run: |
          cd tsubakuro-rust-odbc
          cargo clippy

      - name: Upload_DLL
        uses: actions/upload-artifact@v4
        with:
          name: tsubakuro_rust_odbc.dll
          path: tsubakuro-rust-odbc/target/release/tsubakuro_rust_odbc.dll

      - name: Upload_Installer
        uses: actions/upload-artifact@v4
        with:
          name: tsurugi_odbc_driver_installer.exe
          path: tsubakuro-rust-odbc/installer/Output/tsurugi_odbc_driver_installer.exe
