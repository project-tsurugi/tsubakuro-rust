plugins {
    id 'java-library'
    id 'application'
    id 'com.github.spotbugs' version '5.2.5'
    id "com.github.hierynomus.license" version "0.16.1"
}

group = 'com.tsurugidb.tsubakuro.rust.odbc'
version = '0.5.0'


if (hasProperty('mavenLocal')) {
    repositories {
        mavenLocal()
    }
} else {
    repositories {
        mavenCentral()
        maven {
            url 'https://central.sonatype.com/repository/maven-snapshots/'
            content {
                includeGroupByRegex 'com\\.tsurugidb.*'
            }
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 8, 'hours'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) { task ->
    task.options.encoding 'UTF-8'
}

spotbugs {
  excludeFilter = file("spotbugs-exclude-filter.xml")
}

spotbugsMain {
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest.enabled = false

license {
    header rootProject.file("source-header.txt")
    mapping {
        java = 'SLASHSTAR_STYLE'
        sh = 'SCRIPT_STYLE'
        properties = 'SCRIPT_STYLE'
    }
    includes(['**/*.java', '**/*.sh', '**/*.properties'])
}

task licenseFormatDist(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
    source = fileTree(dir: "src/dist")
}
licenseFormat.dependsOn licenseFormatDist

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.36'
  implementation 'ch.qos.logback:logback-classic:1.5.18'

  testImplementation platform('org.junit:junit-bom:5.10.1')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'com.tsurugidb.iceaxe:iceaxe-core:1.11.0-SNAPSHOT'

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }

    systemProperty 'tsurugi.dbtest.odbc.lib.name', findProperty('dbtest.odbc.lib.name') ?: 'odbc32'
    systemProperty 'tsurugi.dbtest.connection.string', findProperty('dbtest.connection.string') ?: ''
    systemProperty 'tsurugi.dbtest.dsn', findProperty('dbtest.dsn') ?: ''
    systemProperty 'tsurugi.dbtest.endpoint', findProperty('dbtest.endpoint') ?: 'tcp://localhost:12345'
    systemProperty 'tsurugi.dbtest.endpoint.java', findProperty('dbtest.endpoint.java') ?: ''
    systemProperty 'tsurugi.dbtest.user', findProperty('dbtest.user') ?: ''
    systemProperty 'tsurugi.dbtest.password', findProperty('dbtest.password') ?: ''
    systemProperty 'tsurugi.dbtest.auth-token', findProperty('dbtest.auth-token') ?: ''
    systemProperty 'tsurugi.dbtest.credentials', findProperty('dbtest.credentials') ?: ''
}


application {
    applicationName = 'odbc-example'
    mainClass = 'com.tsurugidb.tsubakuro.rust.odbc.example.TgOdbcExampleMain'
}

distTar {
    archiveFileName = "${project.name}.tar.gz"
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}
